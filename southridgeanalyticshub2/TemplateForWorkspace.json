{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "southridgeanalyticshub2"
		},
		"AdventureWorks_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AdventureWorks'"
		},
		"Metadatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Metadatabase'"
		},
		"SqlServerVanArsdel_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServerVanArsdel'"
		},
		"southridgeanalyticshub-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'southridgeanalyticshub-WorkspaceDefaultSqlServer'"
		},
		"SouthridgeKeys_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://SouthridgeKeyVault.vault.azure.net/"
		},
		"SqlServerVanArsdel_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "southridge"
		},
		"southridgeanalyticshub-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://southridgedatalake02.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Load FourthCoffeee')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Load Customers",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowFourthCoffeeCustomers",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Customers": {},
									"CustomersSilver": {},
									"CustomerSink": {},
									"AddressesSink": {},
									"CustomerSK": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "Load Actors",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowFourthCoffeeActors",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Actors": {},
									"ActorsSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Load Movies",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowFourthCoffeeMovies",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Movies": {},
									"MoviesSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Load MovieActors",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Load Customers",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Load Actors",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Load Movies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowFourthCoffeeMovieActors",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MovieActors": {},
									"MovieActorsSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Load OnlineMovieMappings",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Load MovieActors",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowFourthCoffeeOnlineMovieMappings",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"OnlineMovieMappings": {},
									"OnlineMovieMappingsSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Load Transactions",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Load OnlineMovieMappings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowFourthCoffeeRentals",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Transactions": {},
									"Rentals": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "LakeDatabase"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/DataflowFourthCoffeeCustomers')]",
				"[concat(variables('workspaceId'), '/dataflows/DataflowFourthCoffeeActors')]",
				"[concat(variables('workspaceId'), '/dataflows/DataflowFourthCoffeeMovies')]",
				"[concat(variables('workspaceId'), '/dataflows/DataflowFourthCoffeeMovieActors')]",
				"[concat(variables('workspaceId'), '/dataflows/DataflowFourthCoffeeOnlineMovieMappings')]",
				"[concat(variables('workspaceId'), '/dataflows/DataflowFourthCoffeeRentals')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load Helper Tables')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowHelperTables",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DateTable": {},
									"TimeTable": {},
									"NumberTable": {},
									"Date": {},
									"Time": {},
									"Numbers": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "synapse/HelperTables"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "LakeDatabase"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/DataflowHelperTables')]",
				"[concat(variables('workspaceId'), '/linkedServices/southridgeanalyticshub-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load Southridge')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Load Customers",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowSouthridgeCustomers",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CloudSalesCustomers": {},
									"CloudStreamingCustomers": {},
									"CustomerSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Load Actors",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowSouthridgeActors",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SouthridgeMoviews": {},
									"Actors": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Load Movies",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Load Customers",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Load Actors",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Load Addresses",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowSouthridgeMovies",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SouthridgeMovies": {},
									"Actors": {},
									"Movies": {},
									"MovieActors": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Load Addresses",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowSouthridgeAddresses",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CloudSalesAddresses": {},
									"CloudStreamingAddresses": {},
									"CustomerAddresses": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Load DVDSales",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Load Movies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowSouthridgeDVDSales",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Orders": {},
									"OrderDetails": {},
									"DVDSales": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Load Streaming",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Load Movies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowSouthridgeStreaming",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StreamingTransactions": {},
									"Streaming": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "LakeDatabase"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/DataflowSouthridgeCustomers')]",
				"[concat(variables('workspaceId'), '/dataflows/DataflowSouthridgeActors')]",
				"[concat(variables('workspaceId'), '/dataflows/DataflowSouthridgeMovies')]",
				"[concat(variables('workspaceId'), '/dataflows/DataflowSouthridgeAddresses')]",
				"[concat(variables('workspaceId'), '/dataflows/DataflowSouthridgeDVDSales')]",
				"[concat(variables('workspaceId'), '/dataflows/DataflowSouthridgeStreaming')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load VanArsdel')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Load Customers",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowVanArsdelCustomers",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Customers": {},
									"CustomerSilver": {},
									"CustomersSink": {},
									"AddressesSink": {},
									"CustomerSK": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "Load Actors",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowVanArsdelActors",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Actors": {},
									"ActorsSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Load Movies",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowVanArsdelMovies",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Movies": {},
									"MoviesSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Load MovieActors",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Load Customers",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Load Actors",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Load Movies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowVanArsdelMovieActors",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MovieActors": {},
									"MovieActorsSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Load OnlineMovieMappings",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Load MovieActors",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowVanArsdelOnlineMovieMappings",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"OnlineMovieMappings": {},
									"OnlineMovieMappingsSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Load Transactions",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Load OnlineMovieMappings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowVanArsdelRentals",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Transactions": {},
									"Rentals": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "LakeDatabase"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/DataflowVanArsdelCustomers')]",
				"[concat(variables('workspaceId'), '/dataflows/DataflowVanArsdelActors')]",
				"[concat(variables('workspaceId'), '/dataflows/DataflowVanArsdelMovies')]",
				"[concat(variables('workspaceId'), '/dataflows/DataflowVanArsdelMovieActors')]",
				"[concat(variables('workspaceId'), '/dataflows/DataflowVanArsdelOnlineMovieMappings')]",
				"[concat(variables('workspaceId'), '/dataflows/DataflowVanArsdelRentals')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Master Pipeline Bronze to Silver')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute Southridge",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load Southridge",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute FourthCoffee",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Southridge",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load FourthCoffeee",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute VanArsdel",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute FourthCoffee",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load VanArsdel",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "LakeDatabase"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Load Southridge')]",
				"[concat(variables('workspaceId'), '/pipelines/Load FourthCoffeee')]",
				"[concat(variables('workspaceId'), '/pipelines/Load VanArsdel')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Master Pipeline Sources to Bronze')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Load AdventureWorks",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "MetadataDrivenCopyTask_AdventureWorks_TopLevel",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"MaxNumberOfObjectsReturnedFromLookupActivity": {
									"value": "@pipeline().parameters.NumberOfObjectsReturnedFromLookupActivity",
									"type": "Expression"
								},
								"MaxNumberOfConcurrentTasks": {
									"value": "@pipeline().parameters.NumberOfConcurrentTasks",
									"type": "Expression"
								},
								"MainControlTableName": {
									"value": "@pipeline().parameters.ControlTableName",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ControlTableName": {
						"type": "string",
						"defaultValue": "dbo.ControlTable"
					},
					"NumberOfConcurrentTasks": {
						"type": "int",
						"defaultValue": 20
					},
					"NumberOfObjectsReturnedFromLookupActivity": {
						"type": "int",
						"defaultValue": 5000
					}
				},
				"folder": {
					"name": "Bronze Layer"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/MetadataDrivenCopyTask_AdventureWorks_TopLevel')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MetadataDrivenCopyTask_AdventureWorks_BottomLevel')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This pipeline will copy objects from one group. The objects belonging to this group will be copied parallelly.",
				"activities": [
					{
						"name": "ListObjectsFromOneGroup",
						"description": "List objects from one group and iterate each of them to downstream activities",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.ObjectsPerGroupToCopy",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "RouteJobsBasedOnLoadingBehavior",
									"description": "Check the loading behavior for each object if it requires full load or incremental load. If it is Default or FullLoad case, do full load. If it is DeltaLoad case, do incremental load via watermark column to identify changes.",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@json(item().DataLoadingBehaviorSettings).dataLoadingBehavior",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "FullLoad",
												"activities": [
													{
														"name": "FullLoadOneObject",
														"description": "Take a full snapshot on this object and copy it to the destination",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
															},
															{
																"name": "Destination",
																"value": "@{json(item().SinkObjectSettings).fileSystem}/@{json(item().SinkObjectSettings).folderPath}/@{json(item().SinkObjectSettings).fileName}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "@json(item().CopySourceSettings).sqlReaderQuery",
																	"type": "Expression"
																},
																"partitionOption": {
																	"value": "@json(item().CopySourceSettings).partitionOption",
																	"type": "Expression"
																},
																"partitionSettings": {
																	"partitionColumnName": {
																		"value": "@json(item().CopySourceSettings).partitionColumnName",
																		"type": "Expression"
																	},
																	"partitionUpperBound": {
																		"value": "@json(item().CopySourceSettings).partitionUpperBound",
																		"type": "Expression"
																	},
																	"partitionLowerBound": {
																		"value": "@json(item().CopySourceSettings).partitionLowerBound",
																		"type": "Expression"
																	},
																	"partitionNames": "@json(item().CopySourceSettings).partitionNames"
																}
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"value": "@json(item().CopyActivitySettings).translator",
																"type": "Expression"
															}
														},
														"inputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_AdventureWorks_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SourceObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SourceObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_AdventureWorks_DestinationDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_fileName": {
																		"value": "@json(item().SinkObjectSettings).fileName",
																		"type": "Expression"
																	},
																	"cw_folderPath": {
																		"value": "@json(item().SinkObjectSettings).folderPath",
																		"type": "Expression"
																	},
																	"cw_fileSystem": {
																		"value": "@json(item().SinkObjectSettings).fileSystem",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "DeltaLoad",
												"activities": [
													{
														"name": "GetMaxWatermarkValue",
														"description": "Query the source object to get the max value from watermark column",
														"type": "Lookup",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "select max(@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}) as CurrentMaxWaterMarkColumnValue from [@{json(item().SourceObjectSettings).schema}].[@{json(item().SourceObjectSettings).table}]",
																	"type": "Expression"
																},
																"partitionOption": "None"
															},
															"dataset": {
																"referenceName": "MetadataDrivenCopyTask_AdventureWorks_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SourceObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SourceObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														}
													},
													{
														"name": "SetWatermarkValueQuoteChar",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "GetMaxWatermarkValue",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "WatermarkValueQuoteChar",
															"value": {
																"value": "@if(contains(json(item().DataLoadingBehaviorSettings).watermarkColumnType, 'Int'), '','''')",
																"type": "Expression"
															}
														}
													},
													{
														"name": "DeltaLoadOneObject",
														"description": "Copy the changed data only from last time via comparing the value in watermark column to identify changes.",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "SetWatermarkValueQuoteChar",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
															},
															{
																"name": "Destination",
																"value": "@{json(item().SinkObjectSettings).fileSystem}/@{json(item().SinkObjectSettings).folderPath}/@{json(item().SinkObjectSettings).fileName}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "select * from [@{json(item().SourceObjectSettings).schema}].[@{json(item().SourceObjectSettings).table}]\n                    where @{json(item().DataLoadingBehaviorSettings).watermarkColumnName}\n                    > @{variables('WatermarkValueQuoteChar')}@{json(item().DataLoadingBehaviorSettings).watermarkColumnStartValue}@{variables('WatermarkValueQuoteChar')}\n                    and @{json(item().DataLoadingBehaviorSettings).watermarkColumnName}\n                    <= @{variables('WatermarkValueQuoteChar')}@{activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue}@{variables('WatermarkValueQuoteChar')}",
																	"type": "Expression"
																},
																"partitionOption": {
																	"value": "@json(item().CopySourceSettings).partitionOption",
																	"type": "Expression"
																},
																"partitionSettings": {
																	"partitionColumnName": {
																		"value": "@json(item().CopySourceSettings).partitionColumnName",
																		"type": "Expression"
																	},
																	"partitionUpperBound": {
																		"value": "@json(item().CopySourceSettings).partitionUpperBound",
																		"type": "Expression"
																	},
																	"partitionLowerBound": {
																		"value": "@json(item().CopySourceSettings).partitionLowerBound",
																		"type": "Expression"
																	},
																	"partitionNames": "@json(item().CopySourceSettings).partitionNames"
																}
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"value": "@json(item().CopyActivitySettings).translator",
																"type": "Expression"
															}
														},
														"inputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_AdventureWorks_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SourceObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SourceObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_AdventureWorks_DestinationDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_fileName": {
																		"value": "@{json(item().SinkObjectSettings).fileName}-@{json(item().DataLoadingBehaviorSettings).watermarkColumnStartValue}-@{activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue}",
																		"type": "Expression"
																	},
																	"cw_folderPath": {
																		"value": "@json(item().SinkObjectSettings).folderPath",
																		"type": "Expression"
																	},
																	"cw_fileSystem": {
																		"value": "@json(item().SinkObjectSettings).fileSystem",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "UpdateWatermarkColumnValue",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "DeltaLoadOneObject",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[dbo].[UpdateWatermarkColumnValue_6di]",
															"storedProcedureParameters": {
																"Id": {
																	"value": {
																		"value": "@item().Id",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"watermarkColumnStartValue": {
																	"value": {
																		"value": "@activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "Metadatabase",
															"type": "LinkedServiceReference"
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "DefaultFullLoadOneObject",
												"description": "Take a full snapshot on this object and copy it to the destination",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [
													{
														"name": "Source",
														"value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
													},
													{
														"name": "Destination",
														"value": "@{json(item().SinkObjectSettings).fileSystem}/@{json(item().SinkObjectSettings).folderPath}/@{json(item().SinkObjectSettings).fileName}"
													}
												],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@json(item().CopySourceSettings).sqlReaderQuery",
															"type": "Expression"
														},
														"partitionOption": {
															"value": "@json(item().CopySourceSettings).partitionOption",
															"type": "Expression"
														},
														"partitionSettings": {
															"partitionColumnName": {
																"value": "@json(item().CopySourceSettings).partitionColumnName",
																"type": "Expression"
															},
															"partitionUpperBound": {
																"value": "@json(item().CopySourceSettings).partitionUpperBound",
																"type": "Expression"
															},
															"partitionLowerBound": {
																"value": "@json(item().CopySourceSettings).partitionLowerBound",
																"type": "Expression"
															},
															"partitionNames": "@json(item().CopySourceSettings).partitionNames"
														}
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"validateDataConsistency": false,
													"translator": {
														"value": "@json(item().CopyActivitySettings).translator",
														"type": "Expression"
													}
												},
												"inputs": [
													{
														"referenceName": "MetadataDrivenCopyTask_AdventureWorks_SourceDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_schema": {
																"value": "@json(item().SourceObjectSettings).schema",
																"type": "Expression"
															},
															"cw_table": {
																"value": "@json(item().SourceObjectSettings).table",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "MetadataDrivenCopyTask_AdventureWorks_DestinationDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_fileName": {
																"value": "@json(item().SinkObjectSettings).fileName",
																"type": "Expression"
															},
															"cw_folderPath": {
																"value": "@json(item().SinkObjectSettings).folderPath",
																"type": "Expression"
															},
															"cw_fileSystem": {
																"value": "@json(item().SinkObjectSettings).fileSystem",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ObjectsPerGroupToCopy": {
						"type": "Array"
					}
				},
				"variables": {
					"WatermarkValueQuoteChar": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Bronze Layer/AdventureWorks"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/MetadataDrivenCopyTask_AdventureWorks_SourceDS')]",
				"[concat(variables('workspaceId'), '/datasets/MetadataDrivenCopyTask_AdventureWorks_DestinationDS')]",
				"[concat(variables('workspaceId'), '/linkedServices/Metadatabase')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MetadataDrivenCopyTask_AdventureWorks_MiddleLevel')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This pipeline will copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
				"activities": [
					{
						"name": "DivideOneBatchIntoMultipleGroups",
						"description": "Divide objects from single batch into multiple sub parallel groups to avoid reaching the output limit of lookup activity.",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, add(div(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                    if(equals(mod(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), 0), 0, 1)))",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "GetObjectsPerGroupToCopy",
									"description": "Get objects (tables etc.) from control table required to be copied in this group. The order of objects to be copied following the TaskId in control table (ORDER BY [TaskId] DESC).",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlDWSource",
											"sqlReaderQuery": {
												"value": "WITH OrderedControlTable AS (\n                             SELECT *, ROW_NUMBER() OVER (ORDER BY [TaskId], [Id] DESC) AS RowNumber\n                             FROM @{pipeline().parameters.MainControlTableName}\n                             where TopLevelPipelineName = '@{pipeline().parameters.TopLevelPipelineName}'\n                             and TriggerName like '%@{pipeline().parameters.TriggerName}%' and CopyEnabled = 1)\n                             SELECT * FROM OrderedControlTable WHERE RowNumber BETWEEN @{add(mul(int(item()),pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                             add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch), 1))}\n                             AND @{min(add(mul(int(item()), pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch),\n                             pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity)),\n                            mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, add(pipeline().parameters.CurrentSequentialNumberOfBatch,1)), pipeline().parameters.SumOfObjectsToCopy)}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "MetadataDrivenCopyTask_AdventureWorks_ControlDS",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "CopyObjectsInOneGroup",
									"description": "Execute another pipeline to copy objects from one group. The objects belonging to this group will be copied parallelly.",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "GetObjectsPerGroupToCopy",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "MetadataDrivenCopyTask_AdventureWorks_BottomLevel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ObjectsPerGroupToCopy": {
												"value": "@activity('GetObjectsPerGroupToCopy').output.value",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MaxNumberOfObjectsReturnedFromLookupActivity": {
						"type": "Int"
					},
					"TopLevelPipelineName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"CurrentSequentialNumberOfBatch": {
						"type": "Int"
					},
					"SumOfObjectsToCopy": {
						"type": "Int"
					},
					"SumOfObjectsToCopyForCurrentBatch": {
						"type": "Int"
					},
					"MainControlTableName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Bronze Layer/AdventureWorks"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/MetadataDrivenCopyTask_AdventureWorks_ControlDS')]",
				"[concat(variables('workspaceId'), '/pipelines/MetadataDrivenCopyTask_AdventureWorks_BottomLevel')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MetadataDrivenCopyTask_AdventureWorks_TopLevel')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This pipeline will count the total number of objects (tables etc.) required to be copied in this run, come up with the number of sequential batches based on the max allowed concurrent copy task, and then execute another pipeline to copy different batches sequentially.",
				"activities": [
					{
						"name": "GetSumOfObjectsToCopy",
						"description": "Count the total number of objects (tables etc.) required to be copied in this run.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": {
									"value": "SELECT count(*) as count FROM @{pipeline().parameters.MainControlTableName} where TopLevelPipelineName='@{pipeline().Pipeline}' and CopyEnabled = 1",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "MetadataDrivenCopyTask_AdventureWorks_ControlDS",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CopyBatchesOfObjectsSequentially",
						"description": "Come up with the number of sequential batches based on the max allowed concurrent copy tasks, and then execute another pipeline to copy different batches sequentially.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetSumOfObjectsToCopy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, add(div(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks),\n                    if(equals(mod(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks), 0), 0, 1)))",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CopyObjectsInOneBatch",
									"description": "Execute another pipeline to copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "MetadataDrivenCopyTask_AdventureWorks_MiddleLevel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"MaxNumberOfObjectsReturnedFromLookupActivity": {
												"value": "@pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity",
												"type": "Expression"
											},
											"TopLevelPipelineName": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@{pipeline().TriggerName}",
												"type": "Expression"
											},
											"CurrentSequentialNumberOfBatch": {
												"value": "@item()",
												"type": "Expression"
											},
											"SumOfObjectsToCopy": {
												"value": "@activity('GetSumOfObjectsToCopy').output.firstRow.count",
												"type": "Expression"
											},
											"SumOfObjectsToCopyForCurrentBatch": {
												"value": "@min(pipeline().parameters.MaxNumberOfConcurrentTasks, activity('GetSumOfObjectsToCopy').output.firstRow.count)",
												"type": "Expression"
											},
											"MainControlTableName": {
												"value": "@pipeline().parameters.MainControlTableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MaxNumberOfObjectsReturnedFromLookupActivity": {
						"type": "Int",
						"defaultValue": 5000
					},
					"MaxNumberOfConcurrentTasks": {
						"type": "Int",
						"defaultValue": 20
					},
					"MainControlTableName": {
						"type": "String",
						"defaultValue": "dbo.ControlTable"
					}
				},
				"folder": {
					"name": "Bronze Layer/AdventureWorks"
				},
				"annotations": [
					"MetadataDrivenSolution"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/MetadataDrivenCopyTask_AdventureWorks_ControlDS')]",
				"[concat(variables('workspaceId'), '/pipelines/MetadataDrivenCopyTask_AdventureWorks_MiddleLevel')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowVanArsdelRentals",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Transactions": {},
									"Rentals": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/DataflowVanArsdelRentals')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DateTable')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Metadatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Helper Datasets"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "DateSK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DateValue",
						"type": "date"
					},
					{
						"name": "DateYear",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "DateMonth",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "DateDay",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "DateDayOfWeek",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "DateDayOfYear",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "DateWeekOfYear",
						"type": "tinyint",
						"precision": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimDate"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Metadatabase')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MetadataDrivenCopyTask_AdventureWorks_ControlDS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Metadatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AdventureWorks"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "ControlTable"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Metadatabase')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MetadataDrivenCopyTask_AdventureWorks_DestinationDS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					},
					"cw_folderPath": {
						"type": "String"
					},
					"cw_fileSystem": {
						"type": "String"
					}
				},
				"folder": {
					"name": "AdventureWorks"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().cw_folderPath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().cw_fileSystem",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/southridgeanalyticshub-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MetadataDrivenCopyTask_AdventureWorks_SourceDS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdventureWorks",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "AdventureWorks"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AdventureWorks')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NumberTable')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Metadatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Helper Datasets"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "Number",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Numbers"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Metadatabase')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TimeTable')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Metadatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Helper Datasets"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimTime"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Metadatabase')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AdventureWorks')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AdventureWorks_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SouthridgeKeys",
							"type": "LinkedServiceReference"
						},
						"secretName": "SouthridgeDBKey"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/SouthridgeKeys')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Metadatabase')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('Metadatabase_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SouthridgeKeys')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('SouthridgeKeys_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlServerVanArsdel')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServerVanArsdel_connectionString')]",
					"userName": "[parameters('SqlServerVanArsdel_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SouthridgeKeys",
							"type": "LinkedServiceReference"
						},
						"secretName": "CloudDBLogin"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SouthridgeKeys')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/southridgeanalyticshub-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('southridgeanalyticshub-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/southridgeanalyticshub-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('southridgeanalyticshub-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TriggerAdventureWorks')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "MetadataDrivenCopyTask_AdventureWorks_TopLevel",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2022-02-17T14:53:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/MetadataDrivenCopyTask_AdventureWorks_TopLevel')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataflowFourthCoffeeActors')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "FourthCoffee"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Actors"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "ActorsSink"
						}
					],
					"transformations": [
						{
							"name": "AddDataSourceId"
						}
					],
					"script": "source(output(\n\t\tActorID as string,\n\t\tActorName as string,\n\t\tGender as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'bronze',\n\tfolderPath: 'FourthCoffee/Rentals',\n\tfileName: 'Actors.csv',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> Actors\nActors derive(DataSourceId = 3) ~> AddDataSourceId\nAddDataSourceId sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'silver',\n\tfolderPath: 'Actors',\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tActorId = ActorID,\n\t\tName = ActorName,\n\t\tDataSourceId\n\t)) ~> ActorsSink"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/southridgeanalyticshub-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataflowFourthCoffeeCustomers')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "FourthCoffee"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Customers"
						},
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "CustomersSilver"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "CustomerSink"
						},
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "AddressesSink"
						},
						{
							"name": "CustomerSK"
						}
					],
					"transformations": [
						{
							"name": "AddDataSourceId"
						},
						{
							"name": "GetMaxCustomerSK"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "GenerateCustomerSK"
						},
						{
							"name": "GenerateRowNumber"
						},
						{
							"name": "GenerateAddressSK"
						},
						{
							"name": "GenerateRowNumber2"
						}
					],
					"script": "source(output(\n\t\tCustomerID as string,\n\t\tLastName as string,\n\t\tFirstName as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tZipCode as integer,\n\t\tPhoneNumber as long,\n\t\tCreatedDate as date,\n\t\tUpdatedDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'bronze',\n\tfolderPath: 'FourthCoffee/Rentals',\n\tfileName: 'Customers.csv',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> Customers\nsource(output(\n\t\tCustomerSK as long,\n\t\tCustomerID as string,\n\t\tLastName as string,\n\t\tFirstName as string,\n\t\tPhoneNumber as string,\n\t\tCreatedDate as date,\n\t\tUpdatedDate as date,\n\t\tDataSourceId as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'silver',\n\tfolderPath: 'Customers') ~> CustomersSilver\nCustomers derive(NewPhoneNumber = toString(PhoneNumber),\n\t\tDataSourceId = 3,\n\t\tAddressId = uuid(),\n\t\tNewZipCode = toString(ZipCode)) ~> AddDataSourceId\nCustomersSilver aggregate(MaxCustomerSK = max(CustomerSK)+1) ~> GetMaxCustomerSK\nAddDataSourceId select(mapColumn(\n\t\tCustomerID,\n\t\tLastName,\n\t\tFirstName,\n\t\tPhoneNumber = NewPhoneNumber,\n\t\tCreatedDate,\n\t\tUpdatedDate,\n\t\tDataSourceId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumns\nGenerateRowNumber derive(CustomerSK = RowNumber + CustomerSK#outputs()[1].MaxCustomerSK) ~> GenerateCustomerSK\nSelectColumns keyGenerate(output(RowNumber as long),\n\tstartAt: 1L) ~> GenerateRowNumber\nGenerateRowNumber2 derive(AddressSK = RowNumber + CustomerSK#outputs()[1].MaxCustomerSK) ~> GenerateAddressSK\nAddDataSourceId keyGenerate(output(RowNumber as long),\n\tstartAt: 1L) ~> GenerateRowNumber2\nGenerateCustomerSK sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'silver',\n\tfolderPath: 'Customers',\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tCustomerSK,\n\t\tCustomerID,\n\t\tLastName,\n\t\tFirstName,\n\t\tPhoneNumber,\n\t\tCreatedDate,\n\t\tUpdatedDate,\n\t\tDataSourceId\n\t)) ~> CustomerSink\nGenerateAddressSK sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'silver',\n\tfolderPath: 'Addresses',\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tkeys:['CustomerID'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tAddressSK,\n\t\tAddressID = AddressId,\n\t\tCustomerID,\n\t\tAddressLine1,\n\t\tAddressLine2,\n\t\tCity,\n\t\tState,\n\t\tZipCode = NewZipCode,\n\t\tCreatedDate,\n\t\tUpdatedDate,\n\t\tDataSourceId\n\t)) ~> AddressesSink\nGetMaxCustomerSK sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: true,\n\tsaveOrder: 1) ~> CustomerSK"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/southridgeanalyticshub-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataflowFourthCoffeeMovieActors')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "FourthCoffee"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "MovieActors"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "MovieActorsSink"
						}
					],
					"transformations": [
						{
							"name": "AddDataSourceId"
						}
					],
					"script": "source(output(\n\t\tMovieActorID as string,\n\t\tMovieID as string,\n\t\tActorID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'bronze',\n\tfolderPath: 'FourthCoffee/Rentals',\n\tfileName: 'MovieActors.csv',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> MovieActors\nMovieActors derive(DataSourceId = 3) ~> AddDataSourceId\nAddDataSourceId sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'silver',\n\tfolderPath: 'MovieActors',\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tMovieActorId = MovieActorID,\n\t\tMovieId = MovieID,\n\t\tActorId = ActorID,\n\t\tDataSourceId\n\t)) ~> MovieActorsSink"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/southridgeanalyticshub-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataflowFourthCoffeeMovies')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "FourthCoffee"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Movies"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "MoviesSink"
						}
					],
					"transformations": [
						{
							"name": "AddDataSourceId"
						}
					],
					"script": "source(output(\n\t\tMovieID as string,\n\t\tMovieTitle as string,\n\t\tCategory as string,\n\t\tRating as string,\n\t\tRunTimeMin as integer,\n\t\tReleaseDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'bronze',\n\tfolderPath: 'FourthCoffee/Rentals',\n\tfileName: 'Movies.csv',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> Movies\nMovies derive(DataSourceId = 3,\n\t\tReleaseYear = toInteger(year(toDate(ReleaseDate, 'MM-dd-yyyy'))),\n\t\tTier = toInteger(null()),\n\t\tStreamingAvailabilityDate = toDate(null(), 'yyyy-mm-dd'),\n\t\tNewReleaseDate = toDate(ReleaseDate, 'MM-dd-yyyy')) ~> AddDataSourceId\nAddDataSourceId sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'silver',\n\tfolderPath: 'Movies',\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tMovieId = MovieID,\n\t\tTitle = MovieTitle,\n\t\tGenre = Category,\n\t\tRating,\n\t\tReleaseYear,\n\t\tRuntime = RunTimeMin,\n\t\tAvailabilityDate = NewReleaseDate,\n\t\tStreamingAvailabilityDate,\n\t\tTier,\n\t\tDataSourceId\n\t)) ~> MoviesSink"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/southridgeanalyticshub-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataflowFourthCoffeeOnlineMovieMappings')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "FourthCoffee"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "OnlineMovieMappings"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "OnlineMovieMappingsSink"
						}
					],
					"transformations": [
						{
							"name": "AddDataSourceId"
						}
					],
					"script": "source(output(\n\t\tMovieID as string,\n\t\tOnlineMovieID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'bronze',\n\tfolderPath: 'FourthCoffee/Rentals',\n\tfileName: 'OnlineMovieMappings.csv',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> OnlineMovieMappings\nOnlineMovieMappings derive(DataSourceId = 3) ~> AddDataSourceId\nAddDataSourceId sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'silver',\n\tfolderPath: 'OnlineMovieMappings',\n\ttruncate:true,\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tMovieId = MovieID,\n\t\tOnlineMovieId = OnlineMovieID,\n\t\tDataSourceId\n\t)) ~> OnlineMovieMappingsSink"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/southridgeanalyticshub-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataflowFourthCoffeeRentals')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "FourthCoffee"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Transactions"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Rentals"
						}
					],
					"transformations": [
						{
							"name": "AddDataSourceId"
						}
					],
					"script": "source(output(\n\t\tTransactionID as string,\n\t\tCustomerID as string,\n\t\tMovieID as string,\n\t\tRentalDate as date 'yyyyMMdd',\n\t\tReturnDate as date 'yyyyMMdd',\n\t\tRentalCost as decimal(3,2),\n\t\tLateFee as decimal(10,0),\n\t\tRewindFlag as boolean,\n\t\tCreatedDate as date 'yyyy-MM-dd',\n\t\tUpdatedDate as date 'yyyy-MM-dd'\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'bronze',\n\tfolderPath: 'FourthCoffee/Rentals',\n\tfileName: 'Transactions.csv',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> Transactions\nTransactions derive(DataSourceId = 3,\n\t\tNewRentalCost = toDecimal(RentalCost, 5, 2),\n\t\tNewLateFee = toDecimal(LateFee, 5, 2)) ~> AddDataSourceId\nAddDataSourceId sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'silver',\n\tfolderPath: 'Rentals',\n\ttruncate:true,\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tTransactionId = TransactionID,\n\t\tCustomerId = CustomerID,\n\t\tMovieId = MovieID,\n\t\tRentalDate,\n\t\tReturnDate,\n\t\tRentalCost = NewRentalCost,\n\t\tLateFee = NewLateFee,\n\t\tRewindFlag,\n\t\tCreatedDate,\n\t\tUpdatedDate,\n\t\tDataSourceId\n\t)) ~> Rentals"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/southridgeanalyticshub-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataflowHelperTables')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DateTable",
								"type": "DatasetReference"
							},
							"name": "DateTable"
						},
						{
							"dataset": {
								"referenceName": "TimeTable",
								"type": "DatasetReference"
							},
							"name": "TimeTable"
						},
						{
							"dataset": {
								"referenceName": "NumberTable",
								"type": "DatasetReference"
							},
							"name": "NumberTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Date"
						},
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Time"
						},
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Numbers"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          DateSK as integer,",
						"          DateValue as date,",
						"          DateYear as integer,",
						"          DateMonth as integer,",
						"          DateDay as integer,",
						"          DateDayOfWeek as integer,",
						"          DateDayOfYear as integer,",
						"          DateWeekOfYear as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> DateTable",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> TimeTable",
						"source(output(",
						"          Number as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> NumberTable",
						"DateTable sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     compressionType: 'snappy',",
						"     compressionLevel: 'Fastest',",
						"     fileSystem: 'silver',",
						"     folderPath: 'Date',",
						"     truncate:true,",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Date",
						"TimeTable sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     compressionType: 'snappy',",
						"     compressionLevel: 'Fastest',",
						"     fileSystem: 'silver',",
						"     folderPath: 'Time',",
						"     truncate:true,",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Time",
						"NumberTable sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     compressionType: 'snappy',",
						"     compressionLevel: 'Fastest',",
						"     fileSystem: 'silver',",
						"     folderPath: 'Numbers',",
						"     truncate:true,",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Numbers"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DateTable')]",
				"[concat(variables('workspaceId'), '/datasets/TimeTable')]",
				"[concat(variables('workspaceId'), '/datasets/NumberTable')]",
				"[concat(variables('workspaceId'), '/linkedServices/southridgeanalyticshub-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataflowSouthridgeActors')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Southridge"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "SouthridgeMoviews"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Actors"
						}
					],
					"transformations": [
						{
							"name": "FlattenActors"
						},
						{
							"name": "GroupActors"
						},
						{
							"name": "SortActors"
						},
						{
							"name": "GenerateActorId"
						},
						{
							"name": "GenerateSurrogateKey"
						}
					],
					"script": "source(output(\n\t\tactors as (name as string)[],\n\t\tavailabilityDate as string,\n\t\tgenre as string,\n\t\tid as string,\n\t\trating as string,\n\t\treleaseYear as integer,\n\t\truntime as integer,\n\t\tstreamingAvailabilityDate as string,\n\t\ttier as integer,\n\t\ttitle as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'json',\n\tfileSystem: 'bronze',\n\tfolderPath: 'Movies',\n\tfileName: 'movies.json',\n\tdocumentForm: 'documentPerLine') ~> SouthridgeMoviews\nSouthridgeMoviews foldDown(unroll(actors, actors),\n\tmapColumn(\n\t\tactor = actors\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenActors\nFlattenActors aggregate(groupBy(actor),\n\tSumRanking = sum(1)) ~> GroupActors\nGroupActors sort(asc(actor, true)) ~> SortActors\nSortActors derive(ActorId = uuid(),\n\t\tDataSourceId = 1,\n\t\tGender = \"\") ~> GenerateActorId\nGenerateActorId keyGenerate(output(ActorSK as long),\n\tstartAt: 1L) ~> GenerateSurrogateKey\nGenerateSurrogateKey sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'silver',\n\tfolderPath: 'Actors',\n\ttruncate:true,\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tActorSK,\n\t\tActorId,\n\t\tName = actor.name,\n\t\tGender,\n\t\tDataSourceId\n\t)) ~> Actors"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/southridgeanalyticshub-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataflowSouthridgeAddresses')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Southridge"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "CloudSalesAddresses"
						},
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "CloudStreamingAddresses"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "CustomerAddresses"
						}
					],
					"transformations": [
						{
							"name": "JoinCustomers"
						},
						{
							"name": "CreateNewColumns"
						},
						{
							"name": "AddSurrogateKey"
						},
						{
							"name": "SelectColumns"
						}
					],
					"script": "source(output(\n\t\tAddressID as string,\n\t\tCustomerID as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tZipCode as string,\n\t\tCreatedDate as date,\n\t\tUpdatedDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tfileSystem: 'bronze',\n\tfolderPath: 'CloudSales',\n\tfileName: 'dbo_Addresses.parquet',\n\tcompressionCodec: 'snappy') ~> CloudSalesAddresses\nsource(output(\n\t\tAddressID as string,\n\t\tCustomerID as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tZipCode as string,\n\t\tCreatedDate as date,\n\t\tUpdatedDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tfileSystem: 'bronze',\n\tfolderPath: 'CloudStreaming',\n\tfileName: 'dbo_Addresses.parquet',\n\tcompressionCodec: 'snappy') ~> CloudStreamingAddresses\nCloudSalesAddresses, CloudStreamingAddresses join(CloudSalesAddresses@CustomerID == CloudStreamingAddresses@CustomerID\n\t&& CloudSalesAddresses@AddressID == CloudStreamingAddresses@AddressID,\n\tjoinType:'outer',\n\tbroadcast: 'auto')~> JoinCustomers\nJoinCustomers derive(NewAddressLine1 = iif(isNull(CloudSalesAddresses@AddressID), CloudStreamingAddresses@AddressLine1, CloudSalesAddresses@AddressLine1),\n\t\tNewAddressLine2 = iif(isNull(CloudSalesAddresses@AddressID), CloudStreamingAddresses@AddressLine2, CloudSalesAddresses@AddressLine2),\n\t\tNewCity = iif(isNull(CloudSalesAddresses@AddressID), CloudStreamingAddresses@City, CloudSalesAddresses@City),\n\t\tNewState = iif(isNull(CloudSalesAddresses@AddressID), CloudStreamingAddresses@State, CloudSalesAddresses@State),\n\t\tNewZipCode = iif(isNull(CloudSalesAddresses@AddressID), CloudStreamingAddresses@ZipCode, CloudSalesAddresses@ZipCode),\n\t\tNewCreatedDate = iif(isNull(CloudSalesAddresses@AddressID), CloudStreamingAddresses@CreatedDate, CloudSalesAddresses@CreatedDate),\n\t\tNewUpdatedDate = iif(isNull(CloudSalesAddresses@AddressID), CloudStreamingAddresses@UpdatedDate, CloudSalesAddresses@UpdatedDate),\n\t\tNewCustomerId = iif(isNull(CloudSalesAddresses@CustomerID), CloudStreamingAddresses@CustomerID, CloudSalesAddresses@CustomerID),\n\t\tNewAddressId = iif(isNull(CloudSalesAddresses@AddressID), CloudStreamingAddresses@AddressID, CloudSalesAddresses@AddressID),\n\t\tDataSourceId = 1) ~> CreateNewColumns\nSelectColumns keyGenerate(output(AddressSK as long),\n\tstartAt: 1L) ~> AddSurrogateKey\nCreateNewColumns select(mapColumn(\n\t\tAddressLine1 = NewAddressLine1,\n\t\tAddressLine2 = NewAddressLine2,\n\t\tCity = NewCity,\n\t\tState = NewState,\n\t\tZipCode = NewZipCode,\n\t\tCreatedDate = NewCreatedDate,\n\t\tUpdatedDate = NewUpdatedDate,\n\t\tCustomerId = NewCustomerId,\n\t\tAddressId = NewAddressId,\n\t\tDataSourceId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumns\nAddSurrogateKey sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'silver',\n\tfolderPath: 'Addresses',\n\ttruncate:true,\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tAddressSK,\n\t\tAddressID = AddressId,\n\t\tCustomerID = CustomerId,\n\t\tAddressLine1,\n\t\tAddressLine2,\n\t\tCity,\n\t\tState,\n\t\tZipCode,\n\t\tCreatedDate,\n\t\tUpdatedDate,\n\t\tDataSourceId\n\t)) ~> CustomerAddresses"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/southridgeanalyticshub-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataflowSouthridgeCustomers')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Southridge"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "CloudSalesCustomers"
						},
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "CloudStreamingCustomers"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "CustomerSink"
						}
					],
					"transformations": [
						{
							"name": "JoinCustomers"
						},
						{
							"name": "AddNewColumns"
						},
						{
							"name": "AddSurrogateKey"
						},
						{
							"name": "SelectColumns"
						}
					],
					"script": "source(output(\n\t\tCustomerID as string,\n\t\tLastName as string,\n\t\tFirstName as string,\n\t\tPhoneNumber as string,\n\t\tCreatedDate as date,\n\t\tUpdatedDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tfileSystem: 'bronze',\n\tfolderPath: 'CloudSales',\n\tfileName: 'dbo_Customers.parquet') ~> CloudSalesCustomers\nsource(output(\n\t\tCustomerID as string,\n\t\tLastName as string,\n\t\tFirstName as string,\n\t\tPhoneNumber as string,\n\t\tCreatedDate as date,\n\t\tUpdatedDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tfileSystem: 'bronze',\n\tfolderPath: 'CloudStreaming',\n\tfileName: 'dbo_Customers.parquet') ~> CloudStreamingCustomers\nCloudSalesCustomers, CloudStreamingCustomers join(CloudSalesCustomers@CustomerID == CloudStreamingCustomers@CustomerID,\n\tjoinType:'outer',\n\tbroadcast: 'auto')~> JoinCustomers\nJoinCustomers derive(NewCustomerID = iif(isNull(CloudSalesCustomers@CustomerID), CloudStreamingCustomers@CustomerID, CloudSalesCustomers@CustomerID),\n\t\tNewLastName = iif(isNull(CloudSalesCustomers@CustomerID), CloudStreamingCustomers@LastName, CloudSalesCustomers@LastName),\n\t\tNewFirstName = iif(isNull(CloudSalesCustomers@CustomerID), CloudStreamingCustomers@FirstName, CloudSalesCustomers@FirstName),\n\t\tNewPhoneNumber = iif(isNull(CloudSalesCustomers@CustomerID), CloudStreamingCustomers@PhoneNumber, CloudSalesCustomers@PhoneNumber),\n\t\tNewCreatedDate = iif(isNull(CloudSalesCustomers@CustomerID), CloudStreamingCustomers@CreatedDate, CloudSalesCustomers@CreatedDate),\n\t\tNewUpdatedDate = iif(isNull(CloudSalesCustomers@CustomerID), CloudStreamingCustomers@UpdatedDate, CloudSalesCustomers@UpdatedDate),\n\t\tDataSourceId = 1) ~> AddNewColumns\nSelectColumns keyGenerate(output(CustomerSK as long),\n\tstartAt: 1L) ~> AddSurrogateKey\nAddNewColumns select(mapColumn(\n\t\tCustomerID = NewCustomerID,\n\t\tLastName = NewLastName,\n\t\tFirstName = NewFirstName,\n\t\tPhoneNumber = NewPhoneNumber,\n\t\tCreatedDate = NewCreatedDate,\n\t\tUpdatedDate = NewUpdatedDate,\n\t\tDataSourceId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumns\nAddSurrogateKey sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'silver',\n\tfolderPath: 'Customers',\n\ttruncate:true,\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tCustomerSK,\n\t\tCustomerID,\n\t\tLastName,\n\t\tFirstName,\n\t\tPhoneNumber,\n\t\tCreatedDate,\n\t\tUpdatedDate,\n\t\tDataSourceId\n\t)) ~> CustomerSink"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/southridgeanalyticshub-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataflowSouthridgeDVDSales')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Southridge"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Orders"
						},
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "OrderDetails"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "DVDSales"
						}
					],
					"transformations": [
						{
							"name": "JoinOrderDetails"
						},
						{
							"name": "AddDataSourceId"
						}
					],
					"script": "source(output(\n\t\tOrderID as string,\n\t\tCustomerID as string,\n\t\tOrderDate as date,\n\t\tShipDate as date,\n\t\tTotalCost as decimal(19,4),\n\t\tCreatedDate as date,\n\t\tUpdatedDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tfileSystem: 'bronze',\n\tfolderPath: 'CloudSales',\n\tfileName: 'dbo_Orders.parquet',\n\tcompressionCodec: 'snappy') ~> Orders\nsource(output(\n\t\tOrderDetailID as string,\n\t\tOrderID as string,\n\t\tMovieID as string,\n\t\tQuantity as integer,\n\t\tUnitCost as decimal(19,4),\n\t\tLineNumber as integer,\n\t\tCreatedDate as date,\n\t\tUpdatedDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tfileSystem: 'bronze',\n\tfolderPath: 'CloudSales',\n\tfileName: 'dbo_OrderDetails.parquet',\n\tcompressionCodec: 'snappy') ~> OrderDetails\nOrders, OrderDetails join(Orders@OrderID == OrderDetails@OrderID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinOrderDetails\nJoinOrderDetails derive(DataSourceId = 1) ~> AddDataSourceId\nAddDataSourceId sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'silver',\n\tfolderPath: 'DVDSales',\n\ttruncate:true,\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tOrderId = Orders@OrderID,\n\t\tOrderDetailId = OrderDetailID,\n\t\tMovieId = MovieID,\n\t\tQuantity,\n\t\tUnitCost,\n\t\tLineNumber,\n\t\tCustomerId = CustomerID,\n\t\tOrderDate,\n\t\tShipDate,\n\t\tTotalCost,\n\t\tCreatedDate = Orders@CreatedDate,\n\t\tUpdatedDate = Orders@UpdatedDate,\n\t\tDataSourceId\n\t)) ~> DVDSales"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/southridgeanalyticshub-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataflowSouthridgeMovies')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Southridge"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "SouthridgeMovies"
						},
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Actors"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Movies"
						},
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "MovieActors"
						}
					],
					"transformations": [
						{
							"name": "FlattenActors"
						},
						{
							"name": "LookupActorId"
						},
						{
							"name": "AddDataSourceId"
						},
						{
							"name": "AddDataSourceId2"
						},
						{
							"name": "AddMovieSurrogateKey"
						},
						{
							"name": "AddActorSurrogateKey"
						}
					],
					"script": "source(output(\n\t\tactors as (name as string)[],\n\t\tavailabilityDate as string,\n\t\tgenre as string,\n\t\tid as string,\n\t\trating as string,\n\t\treleaseYear as integer,\n\t\truntime as integer,\n\t\tstreamingAvailabilityDate as string,\n\t\ttier as integer,\n\t\ttitle as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'json',\n\tfileSystem: 'bronze',\n\tfolderPath: 'Movies',\n\tfileName: 'movies.json',\n\tdocumentForm: 'documentPerLine') ~> SouthridgeMovies\nsource(output(\n\t\tActorId as string,\n\t\tName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'silver',\n\tfolderPath: 'Actors') ~> Actors\nSouthridgeMovies foldDown(unroll(actors, actors),\n\tmapColumn(\n\t\tactor = actors,\n\t\tMovieId = id\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenActors\nFlattenActors, Actors lookup(actor.name == Name,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupActorId\nSouthridgeMovies derive(DataSourceId = 1,\n\t\tNewAvailabilityDate = toDate(availabilityDate, 'yyyy-MM-dd'),\n\t\tNewStreamingAvailabilityDate = toDate(streamingAvailabilityDate, 'yyyy-MM-dd')) ~> AddDataSourceId\nLookupActorId derive(DataSourceId = 1,\n\t\tMovieActorId = uuid()) ~> AddDataSourceId2\nAddDataSourceId keyGenerate(output(MovieSK as long),\n\tstartAt: 1L) ~> AddMovieSurrogateKey\nAddDataSourceId2 keyGenerate(output(MovieActorSK as long),\n\tstartAt: 1L) ~> AddActorSurrogateKey\nAddMovieSurrogateKey sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'silver',\n\tfolderPath: 'Movies',\n\ttruncate:true,\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tMovieSK,\n\t\tMovieId = id,\n\t\tTitle = title,\n\t\tGenre = genre,\n\t\tRating = rating,\n\t\tReleaseYear = releaseYear,\n\t\tRuntime = runtime,\n\t\tAvailabilityDate = NewAvailabilityDate,\n\t\tStreamingAvailabilityDate = NewStreamingAvailabilityDate,\n\t\tTier = tier,\n\t\tDataSourceId\n\t)) ~> Movies\nAddActorSurrogateKey sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'silver',\n\tfolderPath: 'MovieActors',\n\ttruncate:true,\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tMovieActorSK,\n\t\tMovieActorId,\n\t\tMovieId,\n\t\tActorId,\n\t\tDataSourceId\n\t)) ~> MovieActors"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/southridgeanalyticshub-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataflowSouthridgeStreaming')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Southridge"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "StreamingTransactions"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Streaming"
						}
					],
					"transformations": [
						{
							"name": "AddDataSourceId"
						}
					],
					"script": "source(output(\n\t\tTransactionID as string,\n\t\tCustomerID as string,\n\t\tMovieID as string,\n\t\tStreamStart as timestamp,\n\t\tStreamEnd as timestamp,\n\t\tCreatedDate as date,\n\t\tUpdatedDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tfileSystem: 'bronze',\n\tfolderPath: 'CloudStreaming',\n\tfileName: 'dbo_Transactions.parquet',\n\tcompressionCodec: 'snappy') ~> StreamingTransactions\nStreamingTransactions derive(DataSourceId = 1) ~> AddDataSourceId\nAddDataSourceId sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'silver',\n\tfolderPath: 'Streaming',\n\ttruncate:true,\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tTransactionId = TransactionID,\n\t\tCustomerId = CustomerID,\n\t\tMovieId = MovieID,\n\t\tStreamStart,\n\t\tStreamEnd,\n\t\tCreatedDate,\n\t\tUpdatedDate,\n\t\tDataSourceId\n\t)) ~> Streaming"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/southridgeanalyticshub-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataflowVanArsdelActors')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "VanArsdel"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Actors"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "ActorsSink"
						}
					],
					"transformations": [
						{
							"name": "AddDataSourceId"
						},
						{
							"name": "AddSurrogateKey"
						}
					],
					"script": "source(output(\n\t\tActorID as string,\n\t\tActorName as string,\n\t\tGender as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tfileSystem: 'bronze',\n\tfolderPath: 'VanArsdel',\n\tfileName: 'dbo_Actors.parquet') ~> Actors\nActors derive(DataSourceId = 2) ~> AddDataSourceId\nAddDataSourceId keyGenerate(output(undefined as long),\n\tstartAt: 1L) ~> AddSurrogateKey\nAddSurrogateKey sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'silver',\n\tfolderPath: 'Actors',\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tActorId = ActorID,\n\t\tName = ActorName,\n\t\tDataSourceId\n\t)) ~> ActorsSink"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/southridgeanalyticshub-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataflowVanArsdelCustomers')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "VanArsdel"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Customers"
						},
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "CustomerSilver"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "CustomersSink"
						},
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "AddressesSink"
						},
						{
							"name": "CustomerSK"
						}
					],
					"transformations": [
						{
							"name": "AddDataSourceId"
						},
						{
							"name": "GetMaxCustomerSK"
						},
						{
							"name": "AddRowNumber"
						},
						{
							"name": "GenerateSK"
						}
					],
					"script": "source(output(\n\t\tCustomerID as string,\n\t\tLastName as string,\n\t\tFirstName as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tZipCode as string,\n\t\tPhoneNumber as string,\n\t\tCreatedDate as date,\n\t\tUpdatedDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tfileSystem: 'bronze',\n\tfolderPath: 'VanArsdel',\n\tfileName: 'dbo_Customers.parquet',\n\tcompressionCodec: 'snappy') ~> Customers\nsource(output(\n\t\tCustomerSK as long,\n\t\tCustomerID as string,\n\t\tLastName as string,\n\t\tFirstName as string,\n\t\tPhoneNumber as string,\n\t\tCreatedDate as date,\n\t\tUpdatedDate as date,\n\t\tDataSourceId as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'silver',\n\tfolderPath: 'Customers') ~> CustomerSilver\nGenerateSK derive(DataSourceId = 2,\n\t\tAddressID = uuid()) ~> AddDataSourceId\nCustomerSilver aggregate(MaxCustomerSK = max(CustomerSK)) ~> GetMaxCustomerSK\nCustomers keyGenerate(output(RowNumber as long),\n\tstartAt: 1L) ~> AddRowNumber\nAddRowNumber derive(CustomerSK = RowNumber + CustomerSK#outputs()[1].MaxCustomerSK,\n\t\tAddressSK = RowNumber + CustomerSK#outputs()[1].MaxCustomerSK) ~> GenerateSK\nAddDataSourceId sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'silver',\n\tfolderPath: 'Customers',\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tCustomerSK,\n\t\tCustomerID,\n\t\tLastName,\n\t\tFirstName,\n\t\tPhoneNumber,\n\t\tCreatedDate,\n\t\tUpdatedDate,\n\t\tDataSourceId\n\t)) ~> CustomersSink\nAddDataSourceId sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'silver',\n\tfolderPath: 'Addresses',\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tAddressSK,\n\t\tAddressID,\n\t\tCustomerID,\n\t\tAddressLine1,\n\t\tAddressLine2,\n\t\tCity,\n\t\tState,\n\t\tZipCode,\n\t\tCreatedDate,\n\t\tUpdatedDate,\n\t\tDataSourceId\n\t)) ~> AddressesSink\nGetMaxCustomerSK sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: true,\n\tsaveOrder: 1) ~> CustomerSK"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/southridgeanalyticshub-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataflowVanArsdelMovieActors')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "VanArsdel"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "MovieActors"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "MovieActorsSink"
						}
					],
					"transformations": [
						{
							"name": "AddDataSourceId"
						}
					],
					"script": "source(output(\n\t\tMovieActorID as string,\n\t\tMovieID as string,\n\t\tActorID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tfileSystem: 'bronze',\n\tfolderPath: 'VanArsdel',\n\tfileName: 'dbo_MovieActors.parquet') ~> MovieActors\nMovieActors derive(DataSourceId = 2) ~> AddDataSourceId\nAddDataSourceId sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'silver',\n\tfolderPath: 'MovieActors',\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tMovieActorId = MovieActorID,\n\t\tMovieId = MovieID,\n\t\tActorId = ActorID,\n\t\tDataSourceId\n\t)) ~> MovieActorsSink"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/southridgeanalyticshub-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataflowVanArsdelMovies')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "VanArsdel"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Movies"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "MoviesSink"
						}
					],
					"transformations": [
						{
							"name": "AddDataSourceId"
						}
					],
					"script": "source(output(\n\t\tMovieID as string,\n\t\tMovieTitle as string,\n\t\tCategory as string,\n\t\tRating as string,\n\t\tRunTimeMin as integer,\n\t\tReleaseDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tfileSystem: 'bronze',\n\tfolderPath: 'VanArsdel',\n\tfileName: 'dbo_Movies.parquet') ~> Movies\nMovies derive(DataSourceId = 2,\n\t\tReleaseYear = toInteger(year(toDate(ReleaseDate, 'MM-dd-yyyy'))),\n\t\tNewReleaseDate = toDate(ReleaseDate, 'MM-dd-yyyy'),\n\t\tStreamingAvailabilityDate = toDate(null(), 'yyyy-mm-dd')) ~> AddDataSourceId\nAddDataSourceId sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'silver',\n\tfolderPath: 'Movies',\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tMovieId = MovieID,\n\t\tTitle = MovieTitle,\n\t\tGenre = Category,\n\t\tRating,\n\t\tReleaseYear,\n\t\tRuntime = RunTimeMin,\n\t\tAvailabilityDate = NewReleaseDate,\n\t\tStreamingAvailabilityDate,\n\t\tDataSourceId\n\t)) ~> MoviesSink"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/southridgeanalyticshub-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataflowVanArsdelOnlineMovieMappings')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "VanArsdel"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "OnlineMovieMappings"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "OnlineMovieMappingsSink"
						}
					],
					"transformations": [
						{
							"name": "AddDataSourceId"
						}
					],
					"script": "source(output(\n\t\tMovieID as string,\n\t\tOnlineMovieID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tfileSystem: 'bronze',\n\tfolderPath: 'VanArsdel',\n\tfileName: 'dbo_OnlineMovieMappings.parquet') ~> OnlineMovieMappings\nOnlineMovieMappings derive(DataSourceId = 2) ~> AddDataSourceId\nAddDataSourceId sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'silver',\n\tfolderPath: 'OnlineMovieMappings',\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tMovieId = MovieID,\n\t\tOnlineMovieId = OnlineMovieID,\n\t\tDataSourceId\n\t)) ~> OnlineMovieMappingsSink"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/southridgeanalyticshub-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataflowVanArsdelRentals')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "VanArsdel"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Transactions"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Rentals"
						}
					],
					"transformations": [
						{
							"name": "Assert1"
						},
						{
							"name": "AddDataSourceId"
						},
						{
							"name": "FilterErrors"
						},
						{
							"name": "FlagErrorRows"
						}
					],
					"script": "source(output(\n\t\tTransactionID as string,\n\t\tCustomerID as string,\n\t\tMovieID as string,\n\t\tRentalDate as integer,\n\t\tReturnDate as integer,\n\t\tRentalCost as decimal(19,4),\n\t\tLateFee as decimal(19,4),\n\t\tRewindFlag as boolean,\n\t\tCreatedDate as date,\n\t\tUpdatedDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tfileSystem: 'bronze',\n\tfolderPath: 'VanArsdel',\n\tfileName: 'dbo_Transactions.parquet') ~> Transactions\nTransactions assert(expectTrue(!isNull(toDate(RentalDate, 'yyyyMMdd')), false, 'RentalDate'),\n\texpectTrue(!isNull(toDate(ReturnDate, 'yyyyMMdd')), false, 'ReturnDate')) ~> Assert1\nFilterErrors derive(DataSourceId = 2,\n\t\tNewRentalDate = toDate(toString(RentalDate), 'yyyyMMdd'),\n\t\tNewReturnDate = toDate(toString(ReturnDate), 'yyyyMMdd'),\n\t\tNewRentalCost = toDecimal(RentalCost, 5, 2),\n\t\tNewLateFee = toDecimal(LateFee, 5, 2)) ~> AddDataSourceId\nFlagErrorRows filter(IsErrorRow == false()) ~> FilterErrors\nAssert1 derive(IsErrorRow = isError()) ~> FlagErrorRows\nAddDataSourceId sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'silver',\n\tfolderPath: 'Rentals',\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tTransactionId = TransactionID,\n\t\tCustomerId = CustomerID,\n\t\tMovieId = MovieID,\n\t\tRentalDate = NewRentalDate,\n\t\tReturnDate = NewReturnDate,\n\t\tRentalCost = NewRentalCost,\n\t\tLateFee = NewLateFee,\n\t\tRewindFlag,\n\t\tCreatedDate,\n\t\tUpdatedDate,\n\t\tDataSourceId\n\t)) ~> Rentals"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/southridgeanalyticshub-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create Actors')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "SQL Serverless"
				},
				"content": {
					"query": "DROP EXTERNAL TABLE extActors;\nCREATE EXTERNAL TABLE extActors (\n\t[ActorSK] int,\n\t[ActorId] nvarchar(256),\n\t[Name] nvarchar(256),\n\t[DataSourceId] int\n\t)\n\tWITH (\n\tLOCATION = 'Actors',\n\tDATA_SOURCE = [silver_southridgedatalake02_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseDeltaFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.extActors\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Southridge",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create Additional Tables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Star Schema"
				},
				"content": {
					"query": "CREATE TABLE [dbo].[DimDate] (\n    [DateSK]         INT      NOT NULL,\n    [DateValue]      DATE     NOT NULL,\n    [DateYear]       SMALLINT NOT NULL,\n    [DateMonth]      TINYINT  NOT NULL,\n    [DateDay]        TINYINT  NOT NULL,\n    [DateDayOfWeek]  TINYINT  NOT NULL,\n    [DateDayOfYear]  SMALLINT NOT NULL,\n    [DateWeekOfYear] TINYINT  NOT NULL\n)\nWITH (HEAP, DISTRIBUTION = REPLICATE);\n\nCREATE TABLE [dbo].[Numbers] (\n    [Number] INT NOT NULL\n)\nWITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = REPLICATE);\n\nCREATE TABLE [dbo].[DimTime] (\n    [TimeSK]          INT      NOT NULL,\n    [TimeValue]       TIME (7) NOT NULL,\n    [TimeHour]        TINYINT  NOT NULL,\n    [TimeMinute]      TINYINT  NOT NULL,\n    [TimeSecond]      TINYINT  NOT NULL,\n    [TimeMinuteOfDay] SMALLINT NOT NULL,\n    [TimeSecondOfDay] INT      NOT NULL\n)\nWITH (HEAP, DISTRIBUTION = REPLICATE);\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Metadatabase",
						"poolName": "Metadatabase"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create Addresses')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "SQL Serverless"
				},
				"content": {
					"query": "DROP EXTERNAL TABLE extAddresses;\nCREATE EXTERNAL TABLE extAddresses (\n\t[AddressSK] int,\n\t[AddressID] nvarchar(256),\n\t[CustomerID] nvarchar(256),\n\t[AddressLine1] nvarchar(256),\n\t[AddressLine2] nvarchar(256),\n\t[City] nvarchar(256),\n\t[State] nvarchar(256),\n\t[ZipCode] nvarchar(256),\n\t[CreatedDate] date,\n\t[UpdatedDate] date,\n\t[DataSourceId] int\n\t)\n\tWITH (\n\tLOCATION = 'Addresses',\n\tDATA_SOURCE = [silver_southridgedatalake02_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseDeltaFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.extAddresses\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Southridge",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create ControlTable')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Loading"
				},
				"content": {
					"query": "IF \n(\n    EXISTS \n    (\n        SELECT * \n        FROM INFORMATION_SCHEMA.TABLES \n        WHERE TABLE_SCHEMA = 'dbo' \n        AND  TABLE_NAME = 'ControlTable'\n    )\n)\nBEGIN\n    DROP TABLE [dbo].[ControlTable]\nEND\n\n/****** Object:  Table [dbo].[ControlTable] ******/\nCREATE TABLE [dbo].[ControlTable]\n(\n    [Id] [int] IDENTITY(1,1) NOT NULL PRIMARY KEY NONCLUSTERED NOT ENFORCED,\n    [SourceObjectSettings] [nvarchar](max) NULL,\n    [SourceConnectionSettingsName] [varchar](max) NULL,\n    [CopySourceSettings] [nvarchar](max) NULL,\n    [SinkObjectSettings] [nvarchar](max) NULL,\n    [SinkConnectionSettingsName] [varchar](max) NULL,\n    [CopySinkSettings] [nvarchar](max) NULL,\n    [CopyActivitySettings] [nvarchar](max) NULL,\n    [TopLevelPipelineName] [varchar](max) NULL,\n    [TriggerName] [nvarchar](max) NULL,\n    [DataLoadingBehaviorSettings] [nvarchar](max) NULL,\n    [TaskId] [int] NULL,\n    [CopyEnabled] [bit] NULL\n) WITH ( HEAP )\n\nDECLARE @MainControlMetadata NVARCHAR(max)  = N'[\n    {\n        \"SourceObjectSettings\": {\n            \"schema\": \"dbo\",\n            \"table\": \"Addresses\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": \"dbo_Addresses.parquet\",\n            \"folderPath\": \"CloudSales\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"partitionOption\": \"None\",\n            \"sqlReaderQuery\": null,\n            \"partitionLowerBound\": null,\n            \"partitionUpperBound\": null,\n            \"partitionColumnName\": null,\n            \"partitionNames\": null\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_CloudSales_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\",\n            \"TriggerSourceSystemsToBronze\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    },\n    {\n        \"SourceObjectSettings\": {\n            \"schema\": \"dbo\",\n            \"table\": \"Customers\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": \"dbo_Customers.parquet\",\n            \"folderPath\": \"CloudSales\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"partitionOption\": \"None\",\n            \"sqlReaderQuery\": null,\n            \"partitionLowerBound\": null,\n            \"partitionUpperBound\": null,\n            \"partitionColumnName\": null,\n            \"partitionNames\": null\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_CloudSales_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\",\n            \"TriggerSourceSystemsToBronze\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    },\n    {\n        \"SourceObjectSettings\": {\n            \"schema\": \"dbo\",\n            \"table\": \"OrderDetails\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": \"dbo_OrderDetails.parquet\",\n            \"folderPath\": \"CloudSales\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"partitionOption\": \"None\",\n            \"sqlReaderQuery\": null,\n            \"partitionLowerBound\": null,\n            \"partitionUpperBound\": null,\n            \"partitionColumnName\": null,\n            \"partitionNames\": null\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_CloudSales_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\",\n            \"TriggerSourceSystemsToBronze\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    },\n    {\n        \"SourceObjectSettings\": {\n            \"schema\": \"dbo\",\n            \"table\": \"Orders\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": \"dbo_Orders.parquet\",\n            \"folderPath\": \"CloudSales\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"partitionOption\": \"None\",\n            \"sqlReaderQuery\": null,\n            \"partitionLowerBound\": null,\n            \"partitionUpperBound\": null,\n            \"partitionColumnName\": null,\n            \"partitionNames\": null\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_CloudSales_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\",\n            \"TriggerSourceSystemsToBronze\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    }\n]';\nINSERT INTO [dbo].[ControlTable] \n(\n    [SourceObjectSettings],\n    [SourceConnectionSettingsName],\n    [CopySourceSettings],\n    [SinkObjectSettings],\n    [SinkConnectionSettingsName],\n    [CopySinkSettings],\n    [CopyActivitySettings],\n    [TopLevelPipelineName],\n    [TriggerName],\n    [DataLoadingBehaviorSettings],\n    [TaskId],\n    [CopyEnabled]\n)\nSELECT * \nFROM OPENJSON(@MainControlMetadata)\nWITH \n(\n    [SourceObjectSettings] [nvarchar](max) AS JSON,\n    [SourceConnectionSettingsName] [varchar](max),\n    [CopySourceSettings] [nvarchar](max) AS JSON,\n    [SinkObjectSettings] [nvarchar](max) AS JSON,\n    [SinkConnectionSettingsName] [varchar](max),\n    [CopySinkSettings] [nvarchar](max) AS JSON,\n    [CopyActivitySettings] [nvarchar](max) AS JSON,\n    [TopLevelPipelineName] [varchar](max),\n    [TriggerName] [nvarchar](max) AS JSON,\n    [DataLoadingBehaviorSettings] [nvarchar](max) AS JSON,\n    [TaskId] [int],\n    [CopyEnabled] [bit]\n)\n\nSET @MainControlMetadata = N'[\n    {\n        \"SourceObjectSettings\": {\n            \"schema\": \"dbo\",\n            \"table\": \"Addresses\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": \"dbo_Addresses.parquet\",\n            \"folderPath\": \"CloudStreaming\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"partitionOption\": \"None\",\n            \"sqlReaderQuery\": null,\n            \"partitionLowerBound\": null,\n            \"partitionUpperBound\": null,\n            \"partitionColumnName\": null,\n            \"partitionNames\": null\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_CloudStreaming_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    },\n    {\n        \"SourceObjectSettings\": {\n            \"schema\": \"dbo\",\n            \"table\": \"Customers\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": \"dbo_Customers.parquet\",\n            \"folderPath\": \"CloudStreaming\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"partitionOption\": \"None\",\n            \"sqlReaderQuery\": null,\n            \"partitionLowerBound\": null,\n            \"partitionUpperBound\": null,\n            \"partitionColumnName\": null,\n            \"partitionNames\": null\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_CloudStreaming_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    },\n    {\n        \"SourceObjectSettings\": {\n            \"schema\": \"dbo\",\n            \"table\": \"Transactions\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": \"dbo_Transactions.parquet\",\n            \"folderPath\": \"CloudStreaming\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"partitionOption\": \"None\",\n            \"sqlReaderQuery\": null,\n            \"partitionLowerBound\": null,\n            \"partitionUpperBound\": null,\n            \"partitionColumnName\": null,\n            \"partitionNames\": null\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_CloudStreaming_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    }\n]';\nINSERT INTO [dbo].[ControlTable] \n(\n    [SourceObjectSettings],\n    [SourceConnectionSettingsName],\n    [CopySourceSettings],\n    [SinkObjectSettings],\n    [SinkConnectionSettingsName],\n    [CopySinkSettings],\n    [CopyActivitySettings],\n    [TopLevelPipelineName],\n    [TriggerName],\n    [DataLoadingBehaviorSettings],\n    [TaskId],\n    [CopyEnabled]\n)\nSELECT * \nFROM OPENJSON(@MainControlMetadata)\nWITH \n(\n    [SourceObjectSettings] [nvarchar](max) AS JSON,\n    [SourceConnectionSettingsName] [varchar](max),\n    [CopySourceSettings] [nvarchar](max) AS JSON,\n    [SinkObjectSettings] [nvarchar](max) AS JSON,\n    [SinkConnectionSettingsName] [varchar](max),\n    [CopySinkSettings] [nvarchar](max) AS JSON,\n    [CopyActivitySettings] [nvarchar](max) AS JSON,\n    [TopLevelPipelineName] [varchar](max),\n    [TriggerName] [nvarchar](max) AS JSON,\n    [DataLoadingBehaviorSettings] [nvarchar](max) AS JSON,\n    [TaskId] [int],\n    [CopyEnabled] [bit]\n)\n\nSET @MainControlMetadata = N'[\n    {\n        \"SourceObjectSettings\": {\n            \"collectionName\": \"movies\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": \"movies.json\",\n            \"folderPath\": \"Movies\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": {\n                \"type\": \"TabularTranslator\",\n                \"mappings\": [\n                    {\n                        \"source\": {\n                            \"path\": \"actors\"\n                        },\n                        \"sink\": {\n                            \"path\": \"$[''actors'']\"\n                        }\n                    },\n                    {\n                        \"source\": {\n                            \"path\": \"$[''availabilityDate'']\"\n                        },\n                        \"sink\": {\n                            \"path\": \"$[''availabilityDate'']\"\n                        }\n                    },\n                    {\n                        \"source\": {\n                            \"path\": \"$[''genre'']\"\n                        },\n                        \"sink\": {\n                            \"path\": \"$[''genre'']\"\n                        }\n                    },\n                    {\n                        \"source\": {\n                            \"path\": \"$[''rating'']\"\n                        },\n                        \"sink\": {\n                            \"path\": \"$[''rating'']\"\n                        }\n                    },\n                    {\n                        \"source\": {\n                            \"path\": \"$[''releaseYear'']\"\n                        },\n                        \"sink\": {\n                            \"path\": \"$[''releaseYear'']\"\n                        }\n                    },\n                    {\n                        \"source\": {\n                            \"path\": \"$[''runtime'']\"\n                        },\n                        \"sink\": {\n                            \"path\": \"$[''runtime'']\"\n                        }\n                    },\n                    {\n                        \"source\": {\n                            \"path\": \"$[''streamingAvailabilityDate'']\"\n                        },\n                        \"sink\": {\n                            \"path\": \"$[''streamingAvailabilityDate'']\"\n                        }\n                    },\n                    {\n                        \"source\": {\n                            \"path\": \"$[''tier'']\"\n                        },\n                        \"sink\": {\n                            \"path\": \"$[''tier'']\"\n                        }\n                    },\n                    {\n                        \"source\": {\n                            \"path\": \"$[''title'']\"\n                        },\n                        \"sink\": {\n                            \"path\": \"$[''title'']\"\n                        }\n                    },\n                    {\n                        \"source\": {\n                            \"path\": \"$[''id'']\"\n                        },\n                        \"sink\": {\n                            \"path\": \"$[''id'']\"\n                        }\n                    }\n                ],\n                \"collectionReference\": \"\"\n            }\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_SouthridgeCatalog_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    }\n]';\n\nINSERT INTO [dbo].[ControlTable] \n(\n    [SourceObjectSettings],\n    [SourceConnectionSettingsName],\n    [CopySourceSettings],\n    [SinkObjectSettings],\n    [SinkConnectionSettingsName],\n    [CopySinkSettings],\n    [CopyActivitySettings],\n    [TopLevelPipelineName],\n    [TriggerName],\n    [DataLoadingBehaviorSettings],\n    [TaskId],\n    [CopyEnabled]\n)\nSELECT * \nFROM OPENJSON(@MainControlMetadata)\nWITH \n(\n    [SourceObjectSettings] [nvarchar](max) AS JSON,\n    [SourceConnectionSettingsName] [varchar](max),\n    [CopySourceSettings] [nvarchar](max) AS JSON,\n    [SinkObjectSettings] [nvarchar](max) AS JSON,\n    [SinkConnectionSettingsName] [varchar](max),\n    [CopySinkSettings] [nvarchar](max) AS JSON,\n    [CopyActivitySettings] [nvarchar](max) AS JSON,\n    [TopLevelPipelineName] [varchar](max),\n    [TriggerName] [nvarchar](max) AS JSON,\n    [DataLoadingBehaviorSettings] [nvarchar](max) AS JSON,\n    [TaskId] [int],\n    [CopyEnabled] [bit]\n)\n\nSET @MainControlMetadata = N'[\n    {\n        \"SourceObjectSettings\": {\n            \"schema\": \"dbo\",\n            \"table\": \"Actors\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": \"dbo_Actors.parquet\",\n            \"folderPath\": \"VanArsdel\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"partitionOption\": \"None\",\n            \"sqlReaderQuery\": null,\n            \"partitionLowerBound\": null,\n            \"partitionUpperBound\": null,\n            \"partitionColumnName\": null,\n            \"partitionNames\": null\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_VanArsdel_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    },\n    {\n        \"SourceObjectSettings\": {\n            \"schema\": \"dbo\",\n            \"table\": \"Customers\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": \"dbo_Customers.parquet\",\n            \"folderPath\": \"VanArsdel\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"partitionOption\": \"None\",\n            \"sqlReaderQuery\": null,\n            \"partitionLowerBound\": null,\n            \"partitionUpperBound\": null,\n            \"partitionColumnName\": null,\n            \"partitionNames\": null\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_VanArsdel_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    },\n    {\n        \"SourceObjectSettings\": {\n            \"schema\": \"dbo\",\n            \"table\": \"MovieActors\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": \"dbo_MovieActors.parquet\",\n            \"folderPath\": \"VanArsdel\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"partitionOption\": \"None\",\n            \"sqlReaderQuery\": null,\n            \"partitionLowerBound\": null,\n            \"partitionUpperBound\": null,\n            \"partitionColumnName\": null,\n            \"partitionNames\": null\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_VanArsdel_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    },\n    {\n        \"SourceObjectSettings\": {\n            \"schema\": \"dbo\",\n            \"table\": \"Movies\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": \"dbo_Movies.parquet\",\n            \"folderPath\": \"VanArsdel\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"partitionOption\": \"None\",\n            \"sqlReaderQuery\": null,\n            \"partitionLowerBound\": null,\n            \"partitionUpperBound\": null,\n            \"partitionColumnName\": null,\n            \"partitionNames\": null\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_VanArsdel_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    },\n    {\n        \"SourceObjectSettings\": {\n            \"schema\": \"dbo\",\n            \"table\": \"OnlineMovieMappings\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": \"dbo_OnlineMovieMappings.parquet\",\n            \"folderPath\": \"VanArsdel\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"partitionOption\": \"None\",\n            \"sqlReaderQuery\": null,\n            \"partitionLowerBound\": null,\n            \"partitionUpperBound\": null,\n            \"partitionColumnName\": null,\n            \"partitionNames\": null\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_VanArsdel_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    },\n    {\n        \"SourceObjectSettings\": {\n            \"schema\": \"dbo\",\n            \"table\": \"Transactions\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": \"dbo_Transactions.parquet\",\n            \"folderPath\": \"VanArsdel\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"partitionOption\": \"None\",\n            \"sqlReaderQuery\": null,\n            \"partitionLowerBound\": null,\n            \"partitionUpperBound\": null,\n            \"partitionColumnName\": null,\n            \"partitionNames\": null\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_VanArsdel_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    }\n]';\nINSERT INTO [dbo].[ControlTable] \n(\n    [SourceObjectSettings],\n    [SourceConnectionSettingsName],\n    [CopySourceSettings],\n    [SinkObjectSettings],\n    [SinkConnectionSettingsName],\n    [CopySinkSettings],\n    [CopyActivitySettings],\n    [TopLevelPipelineName],\n    [TriggerName],\n    [DataLoadingBehaviorSettings],\n    [TaskId],\n    [CopyEnabled]\n)\nSELECT * \nFROM OPENJSON(@MainControlMetadata)\nWITH \n(\n    [SourceObjectSettings] [nvarchar](max) AS JSON,\n    [SourceConnectionSettingsName] [varchar](max),\n    [CopySourceSettings] [nvarchar](max) AS JSON,\n    [SinkObjectSettings] [nvarchar](max) AS JSON,\n    [SinkConnectionSettingsName] [varchar](max),\n    [CopySinkSettings] [nvarchar](max) AS JSON,\n    [CopyActivitySettings] [nvarchar](max) AS JSON,\n    [TopLevelPipelineName] [varchar](max),\n    [TriggerName] [nvarchar](max) AS JSON,\n    [DataLoadingBehaviorSettings] [nvarchar](max) AS JSON,\n    [TaskId] [int],\n    [CopyEnabled] [bit]\n)\n\nSET @MainControlMetadata = N'[\n    {\n        \"SourceObjectSettings\": {\n            \"fileName\": null,\n            \"folderPath\": \"Rentals\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": null,\n            \"folderPath\": \"FourthCoffee/Rentals\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"recursive\": true,\n            \"wildcardFileName\": \"*\"\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null,\n            \"enableSkipIncompatibleRow\": false,\n            \"skipErrorFile\": {\n                \"fileMissing\": true\n            }\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_FourthCoffee_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    },\n    {\n        \"SourceObjectSettings\": {\n            \"fileName\": null,\n            \"folderPath\": \"Transactions_2018\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": null,\n            \"folderPath\": \"FourthCoffee/Transactions_2018\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"recursive\": true,\n            \"wildcardFileName\": \"*\"\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null,\n            \"enableSkipIncompatibleRow\": false,\n            \"skipErrorFile\": {\n                \"fileMissing\": true\n            }\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_FourthCoffee_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    }\n]';\nINSERT INTO [dbo].[ControlTable] \n(\n    [SourceObjectSettings],\n    [SourceConnectionSettingsName],\n    [CopySourceSettings],\n    [SinkObjectSettings],\n    [SinkConnectionSettingsName],\n    [CopySinkSettings],\n    [CopyActivitySettings],\n    [TopLevelPipelineName],\n    [TriggerName],\n    [DataLoadingBehaviorSettings],\n    [TaskId],\n    [CopyEnabled]\n)\nSELECT * \nFROM OPENJSON(@MainControlMetadata)\nWITH \n(\n    [SourceObjectSettings] [nvarchar](max) AS JSON,\n    [SourceConnectionSettingsName] [varchar](max),\n    [CopySourceSettings] [nvarchar](max) AS JSON,\n    [SinkObjectSettings] [nvarchar](max) AS JSON,\n    [SinkConnectionSettingsName] [varchar](max),\n    [CopySinkSettings] [nvarchar](max) AS JSON,\n    [CopyActivitySettings] [nvarchar](max) AS JSON,\n    [TopLevelPipelineName] [varchar](max),\n    [TriggerName] [nvarchar](max) AS JSON,\n    [DataLoadingBehaviorSettings] [nvarchar](max) AS JSON,\n    [TaskId] [int],\n    [CopyEnabled] [bit]\n)\n\nSET @MainControlMetadata = N'[\n    {\n        \"SourceObjectSettings\": {\n            \"schema\": \"SalesLT\",\n            \"table\": \"Address\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": \"SalesLT.Address.parquet\",\n            \"folderPath\": \"AdventureWorksLT\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"partitionOption\": \"None\",\n            \"sqlReaderQuery\": \"select * from SalesLT.Address\",\n            \"partitionLowerBound\": null,\n            \"partitionUpperBound\": null,\n            \"partitionColumnName\": null,\n            \"partitionNames\": null\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_AdventureWorks_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\",\n            \"TriggerAdventureWorks\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    },\n    {\n        \"SourceObjectSettings\": {\n            \"schema\": \"SalesLT\",\n            \"table\": \"Customer\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": \"SalesLT.Customer.parquet\",\n            \"folderPath\": \"AdventureWorksLT\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"partitionOption\": \"None\",\n            \"sqlReaderQuery\": \"select * from SalesLT.Customer\",\n            \"partitionLowerBound\": null,\n            \"partitionUpperBound\": null,\n            \"partitionColumnName\": null,\n            \"partitionNames\": null\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_AdventureWorks_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\",\n            \"TriggerAdventureWorks\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    },\n    {\n        \"SourceObjectSettings\": {\n            \"schema\": \"SalesLT\",\n            \"table\": \"CustomerAddress\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": \"SalesLT.CustomerAddress.parquet\",\n            \"folderPath\": \"AdventureWorksLT\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"partitionOption\": \"None\",\n            \"sqlReaderQuery\": \"select * from SalesLT.CustomerAddress\",\n            \"partitionLowerBound\": null,\n            \"partitionUpperBound\": null,\n            \"partitionColumnName\": null,\n            \"partitionNames\": null\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_AdventureWorks_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\",\n            \"TriggerAdventureWorks\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    },\n    {\n        \"SourceObjectSettings\": {\n            \"schema\": \"SalesLT\",\n            \"table\": \"Product\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": \"SalesLT.Product.parquet\",\n            \"folderPath\": \"AdventureWorksLT\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"partitionOption\": \"None\",\n            \"sqlReaderQuery\": \"select * from SalesLT.Product\",\n            \"partitionLowerBound\": null,\n            \"partitionUpperBound\": null,\n            \"partitionColumnName\": null,\n            \"partitionNames\": null\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_AdventureWorks_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\",\n            \"TriggerAdventureWorks\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    },\n    {\n        \"SourceObjectSettings\": {\n            \"schema\": \"SalesLT\",\n            \"table\": \"ProductCategory\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": \"SalesLT.ProductCategory.parquet\",\n            \"folderPath\": \"AdventureWorksLT\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"partitionOption\": \"None\",\n            \"sqlReaderQuery\": \"select * from SalesLT.ProductCategory\",\n            \"partitionLowerBound\": null,\n            \"partitionUpperBound\": null,\n            \"partitionColumnName\": null,\n            \"partitionNames\": null\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_AdventureWorks_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\",\n            \"TriggerAdventureWorks\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    },\n    {\n        \"SourceObjectSettings\": {\n            \"schema\": \"SalesLT\",\n            \"table\": \"ProductDescription\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": \"SalesLT.ProductDescription.parquet\",\n            \"folderPath\": \"AdventureWorksLT\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"partitionOption\": \"None\",\n            \"sqlReaderQuery\": \"select * from SalesLT.ProductDescription\",\n            \"partitionLowerBound\": null,\n            \"partitionUpperBound\": null,\n            \"partitionColumnName\": null,\n            \"partitionNames\": null\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_AdventureWorks_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\",\n            \"TriggerAdventureWorks\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    },\n    {\n        \"SourceObjectSettings\": {\n            \"schema\": \"SalesLT\",\n            \"table\": \"ProductModel\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": \"SalesLT.ProductModel.parquet\",\n            \"folderPath\": \"AdventureWorksLT\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"partitionOption\": \"None\",\n            \"sqlReaderQuery\": \"select * from SalesLT.ProductModel\",\n            \"partitionLowerBound\": null,\n            \"partitionUpperBound\": null,\n            \"partitionColumnName\": null,\n            \"partitionNames\": null\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_AdventureWorks_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\",\n            \"TriggerAdventureWorks\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    },\n    {\n        \"SourceObjectSettings\": {\n            \"schema\": \"SalesLT\",\n            \"table\": \"ProductModelProductDescription\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": \"SalesLT.ProductModelProductDescription.parquet\",\n            \"folderPath\": \"AdventureWorksLT\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"partitionOption\": \"None\",\n            \"sqlReaderQuery\": \"select * from SalesLT.ProductModelProductDescription\",\n            \"partitionLowerBound\": null,\n            \"partitionUpperBound\": null,\n            \"partitionColumnName\": null,\n            \"partitionNames\": null\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_AdventureWorks_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\",\n            \"TriggerAdventureWorks\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    },\n    {\n        \"SourceObjectSettings\": {\n            \"schema\": \"SalesLT\",\n            \"table\": \"SalesOrderDetail\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": \"SalesLT.SalesOrderDetail.parquet\",\n            \"folderPath\": \"AdventureWorksLT\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"partitionOption\": \"None\",\n            \"sqlReaderQuery\": \"select * from SalesLT.SalesOrderDetail\",\n            \"partitionLowerBound\": null,\n            \"partitionUpperBound\": null,\n            \"partitionColumnName\": null,\n            \"partitionNames\": null\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_AdventureWorks_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\",\n            \"TriggerAdventureWorks\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    },\n    {\n        \"SourceObjectSettings\": {\n            \"schema\": \"SalesLT\",\n            \"table\": \"SalesOrderHeader\"\n        },\n        \"SinkObjectSettings\": {\n            \"fileName\": \"SalesLT.SalesOrderHeader.parquet\",\n            \"folderPath\": \"AdventureWorksLT\",\n            \"fileSystem\": \"bronze\"\n        },\n        \"CopySourceSettings\": {\n            \"partitionOption\": \"None\",\n            \"sqlReaderQuery\": \"select * from SalesLT.SalesOrderHeader\",\n            \"partitionLowerBound\": null,\n            \"partitionUpperBound\": null,\n            \"partitionColumnName\": null,\n            \"partitionNames\": null\n        },\n        \"CopyActivitySettings\": {\n            \"translator\": null\n        },\n        \"TopLevelPipelineName\": \"MetadataDrivenCopyTask_AdventureWorks_TopLevel\",\n        \"TriggerName\": [\n            \"Sandbox\",\n            \"Manual\",\n            \"TriggerAdventureWorks\"\n        ],\n        \"DataLoadingBehaviorSettings\": {\n            \"dataLoadingBehavior\": \"FullLoad\"\n        },\n        \"TaskId\": 0,\n        \"CopyEnabled\": 1\n    }\n]';\nINSERT INTO [dbo].[ControlTable] \n(\n    [SourceObjectSettings],\n    [SourceConnectionSettingsName],\n    [CopySourceSettings],\n    [SinkObjectSettings],\n    [SinkConnectionSettingsName],\n    [CopySinkSettings],\n    [CopyActivitySettings],\n    [TopLevelPipelineName],\n    [TriggerName],\n    [DataLoadingBehaviorSettings],\n    [TaskId],\n    [CopyEnabled]\n)\nSELECT * \nFROM OPENJSON(@MainControlMetadata)\nWITH \n(\n    [SourceObjectSettings] [nvarchar](max) AS JSON,\n    [SourceConnectionSettingsName] [varchar](max),\n    [CopySourceSettings] [nvarchar](max) AS JSON,\n    [SinkObjectSettings] [nvarchar](max) AS JSON,\n    [SinkConnectionSettingsName] [varchar](max),\n    [CopySinkSettings] [nvarchar](max) AS JSON,\n    [CopyActivitySettings] [nvarchar](max) AS JSON,\n    [TopLevelPipelineName] [varchar](max),\n    [TriggerName] [nvarchar](max) AS JSON,\n    [DataLoadingBehaviorSettings] [nvarchar](max) AS JSON,\n    [TaskId] [int],\n    [CopyEnabled] [bit]\n)\n\nUPDATE dbo.ControlTable\nSET CopyEnabled = 0\nWHERE TopLevelPipelineName != 'MetadataDrivenCopyTask_AdventureWorks_TopLevel'\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Metadatabase",
						"poolName": "Metadatabase"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create Customers')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "SQL Serverless"
				},
				"content": {
					"query": "DROP EXTERNAL TABLE dbo.extCustomers;\nCREATE EXTERNAL TABLE dbo.extCustomers (\n\t[CustomerSK] int, \n\t[CustomerID] nvarchar(256),\n\t[LastName] nvarchar(256),\n\t[FirstName] nvarchar(256),\n\t[PhoneNumber] nvarchar(256),\n\t[CreatedDate] date,\n\t[UpdatedDate] date,\n\t[DataSourceId] int\n\t)\n\tWITH (\n\tLOCATION = 'Customers',\n\tDATA_SOURCE = [silver_southridgedatalake02_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseDeltaFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.extCustomers\nwhere [DataSourceId] = 2\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Southridge",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create DVDSales')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "SQL Serverless"
				},
				"content": {
					"query": "DROP EXTERNAL TABLE dbo.extDVDSales;\nCREATE EXTERNAL TABLE dbo.extDVDSales (\n\t[OrderId] nvarchar(256),\n\t[OrderDetailId] nvarchar(256),\n\t[MovieId] nvarchar(256),\n\t[Quantity] int,\n\t[UnitCost] numeric(19,4),\n\t[LineNumber] int,\n\t[CustomerId] nvarchar(256),\n\t[OrderDate] date,\n\t[ShipDate] date,\n\t[TotalCost] numeric(19,4),\n\t[CreatedDate] date,\n\t[UpdatedDate] date,\n\t[DataSourceId] int\n\t)\n\tWITH (\n\tLOCATION = 'DVDSales',\n\tDATA_SOURCE = [silver_southridgedatalake02_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseDeltaFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.extDVDSales\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Southridge",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create Date')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "SQL Serverless"
				},
				"content": {
					"query": "DROP EXTERNAL TABLE extDimDate;\nCREATE EXTERNAL TABLE extDimDate (\n\t[DateSK] int,\n\t[DateValue] date,\n\t[DateYear] smallint,\n\t[DateMonth] int,\n\t[DateDay] int,\n\t[DateDayOfWeek] int,\n\t[DateDayOfYear] smallint,\n\t[DateWeekOfYear] int\n\t)\n\tWITH (\n\tLOCATION = 'Date/',\n\tDATA_SOURCE = [silver_southridgedatalake02_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseDeltaFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.extDimDate\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Southridge",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create ExternalDataSource')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "SQL Serverless"
				},
				"content": {
					"query": "IF NOT EXISTS \n(\n\tSELECT * \n\tFROM sys.external_data_sources \n\tWHERE name = 'silver_southridgedatalake02_dfs_core_windows_net'\n) \nCREATE EXTERNAL DATA SOURCE [silver_southridgedatalake02_dfs_core_windows_net] \nWITH \n(\n\tLOCATION = 'abfss://silver@southridgedatalake02.dfs.core.windows.net' \n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Southridge",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create ExternalFileFormat')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "SQL Serverless"
				},
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseDeltaFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseDeltaFormat] \n\tWITH ( FORMAT_TYPE = DELTA)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Southridge",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create MovieActors')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "SQL Serverless"
				},
				"content": {
					"query": "DROP EXTERNAL TABLE extMovieActors;\nCREATE EXTERNAL TABLE extMovieActors (\n\t[MovieActorSK] int,\n\t[MovieActorId] nvarchar(256),\n\t[MovieId] nvarchar(256),\n\t[ActorId] nvarchar(256),\n\t[DataSourceId] int\n\t)\n\tWITH (\n\tLOCATION = 'MovieActors',\n\tDATA_SOURCE = [silver_southridgedatalake02_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseDeltaFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.extMovieActors\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Southridge",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create Movies')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "SQL Serverless"
				},
				"content": {
					"query": "DROP EXTERNAL TABLE extMovies;\nCREATE EXTERNAL TABLE extMovies (\n\t[MovieSK] int,\n\t[MovieId] nvarchar(256),\n\t[Title] nvarchar(256),\n\t[Genre] nvarchar(256),\n\t[Rating] nvarchar(256),\n\t[ReleaseYear] int,\n\t[Runtime] int,\n\t[AvailabilityDate] date,\n\t[StreamingAvailabilityDate] date,\n\t[Tier] int,\n\t[DataSourceId] int\n\t)\n\tWITH (\n\tLOCATION = 'Movies',\n\tDATA_SOURCE = [silver_southridgedatalake02_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseDeltaFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.extMovies\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Southridge",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create Number')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "SQL Serverless"
				},
				"content": {
					"query": "DROP EXTERNAL TABLE extNumbers;\nCREATE EXTERNAL TABLE extNumbers (\n\t[Number] int\n\t)\n\tWITH (\n\tLOCATION = 'Numbers',\n\tDATA_SOURCE = [silver_southridgedatalake02_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseDeltaFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.extNumbers\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Southridge",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create OnlineMovieMappings')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "SQL Serverless"
				},
				"content": {
					"query": "DROP EXTERNAL TABLE extOnlineMovieMappings\nCREATE EXTERNAL TABLE extOnlineMovieMappings (\n\t[MovieId] nvarchar(256),\n\t[OnlineMovieId] nvarchar(256),\n\t[DataSourceId] int\n\t)\n\tWITH (\n\tLOCATION = 'OnlineMovieMappings',\n\tDATA_SOURCE = [silver_southridgedatalake02_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.extOnlineMovieMappings\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Southridge",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create Rentals')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "SQL Serverless"
				},
				"content": {
					"query": "DROP EXTERNAL TABLE extRentals;\nCREATE EXTERNAL TABLE extRentals (\n\t[TransactionId] nvarchar(256),\n\t[CustomerId] nvarchar(256),\n\t[MovieId] nvarchar(256),\n\t[RentalDate] date,\n\t[ReturnDate] date,\n\t[RentalCost] numeric(5,2),\n\t[LateFee] numeric(5,2),\n\t[RewindFlag] bit,\n\t[CreatedDate] date,\n\t[UpdatedDate] date,\n\t[DataSourceId] int\n\t)\n\tWITH (\n\tLOCATION = 'Rentals',\n\tDATA_SOURCE = [silver_southridgedatalake02_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseDeltaFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.extRentals\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Southridge",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create Streaming')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "SQL Serverless"
				},
				"content": {
					"query": "DROP EXTERNAL TABLE extStreaming;\nCREATE EXTERNAL TABLE extStreaming (\n\t[TransactionId] nvarchar(256),\n\t[CustomerId] nvarchar(256),\n\t[MovieId] nvarchar(256),\n\t[StreamStart] datetime2(7),\n\t[StreamEnd] datetime2(7),\n\t[CreatedDate] date,\n\t[UpdatedDate] date,\n\t[DataSourceId] int\n\t)\n\tWITH (\n\tLOCATION = 'Streaming',\n\tDATA_SOURCE = [silver_southridgedatalake02_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseDeltaFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.extStreaming\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Southridge",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create Time')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "SQL Serverless"
				},
				"content": {
					"query": "DROP EXTERNAL TABLE extDimTime;\nCREATE EXTERNAL TABLE extDimTime (\n\t[TimeSK] int,\n\t[TimeValue] datetime2(7),\n\t[TimeHour] int,\n\t[TimeMinute] int,\n\t[TimeSecond] int,\n\t[TimeMinuteOfDay] smallint,\n\t[TimeSecondOfDay] int\n\t)\n\tWITH (\n\tLOCATION = 'Time',\n\tDATA_SOURCE = [silver_southridgedatalake02_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseDeltaFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.extDimTime\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Southridge",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create Views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Star Schema"
				},
				"content": {
					"query": "DROP VIEW dbo.DimActors;\nGO\nCREATE VIEW dbo.DimActors\nAS\nSELECT\n    ActorSK,\n    ActorId,\n    [Name] as ActorName,\n    '' as ActorGender,\n    DataSourceId\nFROM dbo.extActors;\nGO\n\nDROP VIEW dbo.DimCategories;\nGO\nCREATE VIEW dbo.DimCategories\nAS\nSELECT \n    ROW_NUMBER() OVER (ORDER BY MovieCategoryDescription desc) as MovieCategorySK,\n    MovieCategoryDescription\nFROM \n(\n    SELECT DISTINCT Genre as MovieCategoryDescription\n    FROM dbo.extMovies\n)Categories;\nGO\n\nDROP VIEW dbo.DimCustomers;\nGO\nCREATE VIEW dbo.DimCustomers\nAS\nSELECT \n    CustomerSK,\n    c.CustomerID,\n    c.LastName,\n    c.FirstName,\n    a.AddressLine1,\n    a.AddressLine2,\n    a.City,\n    a.State,\n    a.ZipCode,\n    c.PhoneNumber,\n    c.CreatedDate as RecordStartDate,\n    c.UpdatedDate as RecordEndDate,\n    c.DataSourceId\nFROM dbo.extCustomers c\nLEFT JOIN dbo.extAddresses a on c.CustomerID = a.CustomerID\n    and c.DataSourceId = a.DataSourceId\nGO\n\nDROP VIEW dbo.DimDate;\nGO\nCREATE VIEW dbo.DimDate\nAS\nSELECT \n     [DateSK]\n    ,[DateValue]\n    ,[DateYear]\n    ,[DateMonth]\n    ,[DateDay]\n    ,[DateDayOfWeek]\n    ,[DateDayOfYear]\n    ,[DateWeekOfYear]\nFROM [dbo].[extDimDate]\nGO\n\nDROP VIEW dbo.DimLocation;\nGO\nCREATE VIEW dbo.DimLocation\nAS\nSELECT \n    1 as LocationSK,\n    'Southridge' as LocationName, \n    1 as Streaming,\n    0 as Rentals,\n    1 as Sales\nUNION ALL\nSELECT\n    2 as LocationSK,\n    'VanArsdel' as LocationName, \n    0 as Streaming,\n    1 as Rentals,\n    0 as Sales\nUNION ALL\nSELECT\n    3 as LocationSK,\n    'FourthCofee' as LocationName, \n    0 as Streaming,\n    1 as Rentals,\n    0 as Sales\nGO\n\nDROP VIEW dbo.DimMovieActors;\nGO\nCREATE View dbo.DimMovieActors\nAS\nSELECT\n    MovieId,\n    ActorId,\n    DataSourceId\nFROM dbo.extMovieActors\nGO\n\nDROP VIEW dbo.DimMovies;\nGO\nCREATE VIEW dbo.DimMovies\nAS\nSELECT\n    ROW_NUMBER() OVER (ORDER BY MovieId, DataSourceId asc) as MovieSK,\n    m.MovieId,\n    m.Title as MovieTitle,\n    c.MovieCategorySK,\n    r.MovieRatingSK,\n    m.Runtime as MovieRunTimeMin,\n    m.DataSourceId\nFROM dbo.extMovies m\nLEFT JOIN dbo.DimCategories c on m.Genre = c.MovieCategoryDescription\nLEFT JOIN dbo.DimRatings r on m.Rating = r.MovieRatingDescription\nGO\n\nDROP VIEW dbo.DimRatings;\nGO\nCREATE VIEW dbo.DimRatings\nAS\nSELECT\n    ROW_NUMBER() OVER (ORDER BY Rating desc) as MovieRatingSK,\n    Rating as MovieRatingDescription\nFROM\n(\n    SELECT DISTINCT Rating\n    FROM dbo.extMovies\n\n)ratings\nGO\n\nDROP VIEW dbo.DimTime;\nGO\nCREATE VIEW dbo.DimTime\nAS\nSELECT \n    [TimeSK]\n    ,[TimeValue]\n    ,[TimeHour]\n    ,[TimeMinute]\n    ,[TimeSecond]\n    ,[TimeMinuteOfDay]\n    ,[TimeSecondOfDay]\n FROM [dbo].[extDimTime]\nGO\n\nDROP VIEW dbo.FactRentals;\nGO\nCREATE VIEW dbo.FactRentals\nAS\nSELECT\n    ROW_NUMBER() OVER (ORDER BY TransactionId asc) as RentalSK,\n    [TransactionId],\n    c.CustomerSK,\n    facts.DataSourceId as LocationSK,\n    [MovieSK],\n    d1.DateSK as RentalDateSK,\n    d2.DateSK as ReturnDateSK,\n    DATEDIFF(day, facts.RentalDate, facts.ReturnDate) as RentalDuration,\n    [RentalCost],\n    [LateFee],\n    [RentalCost]+LateFee as [TotalCost],\n    [RewindFlag]\nFROM dbo.extRentals facts\nLEFT JOIN dbo.DimCustomers c on facts.CustomerId = c.CustomerID\n    and facts.DataSourceId = c.DataSourceId\nLEFT JOIN dbo.DimMovies m on facts.MovieId = m.MovieId\n    and facts.DataSourceId = m.DataSourceId\nLEFT JOIN dbo.DimDate d1 on facts.RentalDate = d1.DateValue\nLEFT JOIN dbo.DimDate d2 on facts.ReturnDate = d2.DateValue\nGO\n\nDROP VIEW dbo.FactSales;\nGO\nCREATE VIEW dbo.FactSales\nAS\nSELECT\n    ROW_NUMBER() OVER (ORDER BY OrderId asc) as SalesSK,\n    [OrderId],\n    [LineNumber],\n    d1.DateSK as OrderDateSK,\n    d2.DateSK as ShipDateSK,\n    c.CustomerSK,\n    facts.DataSourceId as LocationSK,\n    m.MovieSK,\n    [Quantity],\n    [UnitCost],\n    [Quantity]*[UnitCost] as ExtendedCost\nFROM [dbo].[extDVDSales] facts\nLEFT JOIN dbo.DimCustomers c on facts.CustomerId = c.CustomerID\n    and facts.DataSourceId = c.DataSourceId\nLEFT JOIN dbo.DimMovies m on facts.MovieId = m.MovieId\n    and facts.DataSourceId = m.DataSourceId\nLEFT JOIN dbo.DimDate d1 on facts.OrderDate = d1.DateValue\nLEFT JOIN dbo.DimDate d2 on facts.ShipDate = d2.DateValue\nGO\n\nDROP VIEW dbo.FactStreaming;\nGO\nCREATE VIEW dbo.FactStreaming\nAS\nSELECT\n    ROW_NUMBER() OVER (ORDER BY TransactionId asc) as StreamingSK,\n    facts.[TransactionId],\n    c.CustomerSK,\n    m.MovieSK,\n    d1.DateSK as StreamStartDateSK,\n    t1.TimeSK as StreamStartTimeSK,\n    d2.DateSK as StreamEndDateSK,\n    t2.TimeSK as StreamEndTimeSK,\n    DATEDIFF(second, StreamStart, StreamEnd) as StreamDurationSec,\n    DATEDIFF(minute, StreamStart, StreamEnd) as StreamDurationMin\n FROM [dbo].[extStreaming] facts\nLEFT JOIN dbo.DimCustomers c on facts.CustomerId = c.CustomerID\n    and facts.DataSourceId = c.DataSourceId\nLEFT JOIN dbo.DimMovies m on facts.MovieId = m.MovieId\n    and facts.DataSourceId = m.DataSourceId\nLEFT JOIN dbo.DimDate d1 on convert(date, facts.StreamStart) = d1.DateValue\nLEFT JOIN dbo.DimDate d2 on convert(date, facts.StreamEnd) = d2.DateValue\nLEFT JOIN dbo.DimTime t1 on datepart(hour, facts.StreamStart) = t1.TimeHour\n    and datepart(minute, facts.StreamStart) = t1.TimeMinute\n    and datepart(second, facts.StreamStart) = t1.TimeSecond\nLEFT JOIN dbo.DimTime t2 on datepart(hour, facts.StreamEnd) = t2.TimeHour\n    and datepart(minute, facts.StreamEnd) = t1.TimeMinute\n    and datepart(second, facts.StreamEnd) = t1.TimeSecond",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Southridge",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Populate Date Table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Star Schema"
				},
				"content": {
					"query": "INSERT INTO dbo.DimDate\n(DateSK, DateValue, DateYear, DateMonth, DateDay, DateDayOfWeek, DateDayOfYear, DateWeekOfYear)\nSELECT \n\tNumber AS DateSK,\n\tDateValue, \n\tYEAR(DateValue) AS DateYear,\n\tMONTH(DateValue) AS DateMonth,\n\tDAY(DateValue) AS DateDay,\n\tDATEPART(WeekDay, DateValue) AS DateDayOfWeek,\n\tDATEPART(DayOfYear, DateValue) AS DateDayOfYear,\n\tDATEPART(Week, DateValue) AS DateWeekOfYear\nFROM\n(\n\tSELECT Number, DATEADD(d, Number - 1, '2017-01-01') AS DateValue\n\tFROM\n\t(\n\t\tSELECT Number\n\t\tFROM dbo.Numbers\n\t\tWHERE Number <= 365\n\t) AS N\n) AS D;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Metadatabase",
						"poolName": "Metadatabase"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Populate Number Table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Star Schema"
				},
				"content": {
					"query": "-- Declare local variables...\nDECLARE\n\t@MaxNumber integer = 1;\n\n-- Insert the seed number...\nINSERT INTO dbo.Numbers\n(Number)\nVALUES\n(1);\n\nDECLARE\n\t@MaxNumber integer = 1;\n    \n-- Loop through and insert additional data up to 1,048,576...\nWHILE (@MaxNumber < 1000000)\nBEGIN\n\tINSERT INTO dbo.Numbers\n\t(Number)\n\tSELECT Number + @MaxNumber\n\tFROM dbo.Numbers;\n\n\tSELECT @MaxNumber = MAX(Number)\n\tFROM dbo.Numbers;\nEND",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Metadatabase",
						"poolName": "Metadatabase"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Populate Time Table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Star Schema"
				},
				"content": {
					"query": "INSERT INTO dbo.DimTime\n(TimeSK, TimeValue, TimeHour, TimeMinute, TimeSecond, TimeMinuteOfDay, TimeSecondOfDay)\nSELECT\n\tNumber AS TimeSK,\n\tTimeValue,\n\tDATEPART(HOUR, TimeValue) AS TimeHour,\n\tDATEPART(MINUTE, TimeValue) AS TimeMinute,\n\tDATEPART(SECOND, TimeValue) AS TimeSecond,\n\tDATEPART(MINUTE, TimeValue) + (DATEPART(HOUR, TimeValue) * 60) AS TimeMinuteOfDay,\n\tDATEPART(SECOND, TimeValue) + ((DATEPART(MINUTE, TimeValue) + (DATEPART(HOUR, TimeValue) * 60)) * 60) AS TimeSecondOfDay\nFROM\n(\n\tSELECT Number, CAST(DATEADD(s, Number - 1, '2017-01-01') as time(7)) AS TimeValue\n\tFROM dbo.Numbers\n\tWHERE Number <= 86400\n) AS T;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Metadatabase",
						"poolName": "Metadatabase"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PurviewPermissions')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Purview"
				},
				"content": {
					"query": "CREATE LOGIN [SouthridgeGovernance] FROM EXTERNAL PROVIDER;\n\nCREATE USER [SouthridgeGovernance] FOR LOGIN [SouthridgeGovernance];\nALTER ROLE db_datareader ADD MEMBER [SouthridgeGovernance];\n\n--GRANT REFERENCES ON DATABASE SCOPED CREDENTIAL::[scoped_credential] TO [PurviewAccountName];",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Southridge",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Query ControlTable')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Loading"
				},
				"content": {
					"query": "SELECT TOP (100) \n    [Id]\n    ,[SourceObjectSettings]\n    ,[SourceConnectionSettingsName]\n    ,[CopySourceSettings]\n    ,[SinkObjectSettings]\n    ,[SinkConnectionSettingsName]\n    ,[CopySinkSettings]\n    ,[CopyActivitySettings]\n    ,[TopLevelPipelineName]\n    ,[TriggerName]\n    ,[DataLoadingBehaviorSettings]\n    ,[TaskId]\n    ,[CopyEnabled]\n FROM [dbo].[ControlTable]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Metadatabase",
						"poolName": "Metadatabase"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP 10 *\nFROM OPENROWSET(\n    BULK 'https://southridgedatalake01.dfs.core.windows.net/silver/Customers',\n    FORMAT = 'delta') as rows;\n\nSELECT count(*)\nFROM OPENROWSET(\n    BULK 'https://southridgedatalake01.dfs.core.windows.net/silver/Customers',\n    FORMAT = 'delta') as rows;\n\n\nSELECT count(*)\nFROM OPENROWSET(\n    BULK 'https://southridgedatalake01.dfs.core.windows.net/silver/Actors',\n    FORMAT = 'delta') as rows\n\nSELECT count(*)\nFROM OPENROWSET(\n    BULK 'https://southridgedatalake01.dfs.core.windows.net/silver/Movies',\n    FORMAT = 'delta') as rows\n\nSELECT *\nFROM OPENROWSET(\n    BULK 'https://southridgedatalake01.dfs.core.windows.net/silver/MovieActors',\n    FORMAT = 'delta') as rows",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 5')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    count(*)\nFROM\n    OPENROWSET(\n        BULK 'https://southridgedatalake01.dfs.core.windows.net/bronze/CloudSales/dbo_Customers.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nwhere CustomerID = '0141920b-f63d-47a7-9794-3deef6d4fdcc'\n\nSELECT\n    count(*)\nFROM\n    OPENROWSET(\n        BULK 'https://southridgedatalake01.dfs.core.windows.net/bronze/CloudStreaming/dbo_Customers.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nwhere CustomerID = '0141920b-f63d-47a7-9794-3deef6d4fdcc'\n\n\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'https://southridgedatalake01.dfs.core.windows.net/silver/Customers',\n        FORMAT = 'DELTA'\n    ) AS [result]\nwhere CustomerID = '0141920b-f63d-47a7-9794-3deef6d4fdcc'\n\nSELECT TOP 10\n    *\nFROM\n    OPENROWSET(\n        BULK 'https://southridgedatalake01.dfs.core.windows.net/silver/DVDSales',\n        FORMAT = 'DELTA'\n    ) AS [result]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SouthridgeLakeDB')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true
							},
							"Name": "SouthridgeLakeDB",
							"EntityType": "DATABASE",
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://silver@southridgedatalake01.dfs.core.windows.net/",
								"Properties": {
									"FormatType": "parquet",
									"LinkedServiceName": "southridgeanalyticshub-WorkspaceDefaultStorage"
								}
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "SouthridgeLakeDB"
							},
							"Name": "Actors",
							"Description": "",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "ActorId",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "Name",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://silver@southridgedatalake01.dfs.core.windows.net/Actors",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://silver@southridgedatalake01.dfs.core.windows.net/Actors",
									"Properties": {
										"LinkedServiceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "ActorId",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "SouthridgeLakeDB"
							},
							"Name": "Addresses",
							"Description": "",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "AddressId",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "CustomerId",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "AddressLine1",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "AddressLine2",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "City",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "State",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "ZipCode",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										}
									},
									{
										"Name": "CreatedDate",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										}
									},
									{
										"Name": "UpdatedDate",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										}
									},
									{
										"Name": "DataSourceId",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://silver@southridgedatalake01.dfs.core.windows.net/Addresses",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://silver@southridgedatalake01.dfs.core.windows.net/Addresses",
									"Properties": {
										"LinkedServiceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "AddressId",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "SouthridgeLakeDB"
							},
							"Name": "Customers",
							"Description": "",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CustomerID",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LastName",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "FirstName",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "PhoneNumber",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "CreatedDate",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										}
									},
									{
										"Name": "UpdatedDate",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										}
									},
									{
										"Name": "DataSourceId",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://bronze@southridgedatalake01.dfs.core.windows.net/CloudSales/dbo_Customers.parquet",
										"FormatTypeSetToDatabaseDefault": false
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://bronze@southridgedatalake01.dfs.core.windows.net/CloudSales/dbo_Customers.parquet",
									"Properties": {
										"LinkedServiceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": false
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "CustomerID",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "SouthridgeLakeDB"
							},
							"Name": "MovieActors",
							"Description": "",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "MovieActorId",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "MovieId",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "ActorId",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "DataSourceId",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://silver@southridgedatalake01.dfs.core.windows.net/MovieActors",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://silver@southridgedatalake01.dfs.core.windows.net/MovieActors",
									"Properties": {
										"LinkedServiceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "MovieActorId",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "SouthridgeLakeDB"
							},
							"Name": "Movies",
							"Description": "",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "MovieId",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "Title",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "Genre",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "Rating",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "ReleaseYear",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										}
									},
									{
										"Name": "Runtime",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										}
									},
									{
										"Name": "AvailabilityDate",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										}
									},
									{
										"Name": "StreamingAvailabilityDate",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										}
									},
									{
										"Name": "Tier",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										}
									},
									{
										"Name": "DataSourceId",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://silver@southridgedatalake01.dfs.core.windows.net/Movies",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://silver@southridgedatalake01.dfs.core.windows.net/Movies",
									"Properties": {
										"LinkedServiceName": "southridgeanalyticshub-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "MovieId",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Metadatabase')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "northeurope"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TriggerSilverPipeline')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Master Pipeline Bronze to Silver",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2022-02-17T17:12:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Master Pipeline Bronze to Silver')]"
			]
		}
	]
}